1
00:00:00,000 --> 00:00:00,310

you

2
00:00:00,310 --> 00:00:00,320
you
 

3
00:00:00,320 --> 00:00:07,370
you
[Music]

4
00:00:07,370 --> 00:00:07,380

 

5
00:00:07,380 --> 00:00:10,789

so just just to start with the problem

6
00:00:10,789 --> 00:00:10,799
so just just to start with the problem
 

7
00:00:10,799 --> 00:00:14,090
so just just to start with the problem
space that NYX is trying to solve there

8
00:00:14,090 --> 00:00:14,100
space that NYX is trying to solve there
 

9
00:00:14,100 --> 00:00:17,180
space that NYX is trying to solve there
is a when we went back edge things in a

10
00:00:17,180 --> 00:00:17,190
is a when we went back edge things in a
 

11
00:00:17,190 --> 00:00:19,490
is a when we went back edge things in a
Linux distribution or or in any

12
00:00:19,490 --> 00:00:19,500
Linux distribution or or in any
 

13
00:00:19,500 --> 00:00:22,360
Linux distribution or or in any
packaging system really there is this

14
00:00:22,360 --> 00:00:22,370
packaging system really there is this
 

15
00:00:22,370 --> 00:00:27,260
packaging system really there is this
loop of state where a package outputs

16
00:00:27,260 --> 00:00:27,270
loop of state where a package outputs
 

17
00:00:27,270 --> 00:00:29,510
loop of state where a package outputs
which are files land on the file system

18
00:00:29,510 --> 00:00:29,520
which are files land on the file system
 

19
00:00:29,520 --> 00:00:31,520
which are files land on the file system
and then the next package picks up those

20
00:00:31,520 --> 00:00:31,530
and then the next package picks up those
 

21
00:00:31,530 --> 00:00:34,610
and then the next package picks up those
files among new packaging meter data and

22
00:00:34,610 --> 00:00:34,620
files among new packaging meter data and
 

23
00:00:34,620 --> 00:00:38,029
files among new packaging meter data and
and uses that to to build you know

24
00:00:38,029 --> 00:00:38,039
and uses that to to build you know
 

25
00:00:38,039 --> 00:00:39,860
and uses that to to build you know
another package and and this look goes

26
00:00:39,860 --> 00:00:39,870
another package and and this look goes
 

27
00:00:39,870 --> 00:00:42,529
another package and and this look goes
on and on and on and at the end it's

28
00:00:42,529 --> 00:00:42,539
on and on and on and at the end it's
 

29
00:00:42,539 --> 00:00:45,079
on and on and on and at the end it's
hard to see really what was compiled or

30
00:00:45,079 --> 00:00:45,089
hard to see really what was compiled or
 

31
00:00:45,089 --> 00:00:48,169
hard to see really what was compiled or
build with what and it's even you know

32
00:00:48,169 --> 00:00:48,179
build with what and it's even you know
 

33
00:00:48,179 --> 00:00:49,759
build with what and it's even you know
and worse it's it's not reproducible

34
00:00:49,759 --> 00:00:49,769
and worse it's it's not reproducible
 

35
00:00:49,769 --> 00:00:52,910
and worse it's it's not reproducible
right so we have kind of two spectra you

36
00:00:52,910 --> 00:00:52,920
right so we have kind of two spectra you
 

37
00:00:52,920 --> 00:00:54,709
right so we have kind of two spectra you
know two things that are trying to solve

38
00:00:54,709 --> 00:00:54,719
know two things that are trying to solve
 

39
00:00:54,719 --> 00:00:56,239
know two things that are trying to solve
this problem on one inspector into the

40
00:00:56,239 --> 00:00:56,249
this problem on one inspector into the
 

41
00:00:56,249 --> 00:00:57,919
this problem on one inspector into the
continues ation so start from scratch

42
00:00:57,919 --> 00:00:57,929
continues ation so start from scratch
 

43
00:00:57,929 --> 00:01:00,889
continues ation so start from scratch
and you know go through through the feet

44
00:01:00,889 --> 00:01:00,899
and you know go through through the feet
 

45
00:01:00,899 --> 00:01:02,930
and you know go through through the feet
through the state loop so many times and

46
00:01:02,930 --> 00:01:02,940
through the state loop so many times and
 

47
00:01:02,940 --> 00:01:05,329
through the state loop so many times and
always end up at the same thing or we we

48
00:01:05,329 --> 00:01:05,339
always end up at the same thing or we we
 

49
00:01:05,339 --> 00:01:05,960
always end up at the same thing or we we
use Nick's

50
00:01:05,960 --> 00:01:05,970
use Nick's
 

51
00:01:05,970 --> 00:01:09,350
use Nick's
where we try to be precise and use a

52
00:01:09,350 --> 00:01:09,360
where we try to be precise and use a
 

53
00:01:09,360 --> 00:01:13,069
where we try to be precise and use a
purely functional language to to to be

54
00:01:13,069 --> 00:01:13,079
purely functional language to to to be
 

55
00:01:13,079 --> 00:01:16,789
purely functional language to to to be
able to to compose things together which

56
00:01:16,789 --> 00:01:16,799
able to to compose things together which
 

57
00:01:16,799 --> 00:01:18,679
able to to compose things together which
you know should in theory give us a bit

58
00:01:18,679 --> 00:01:18,689
you know should in theory give us a bit
 

59
00:01:18,689 --> 00:01:23,289
you know should in theory give us a bit
more precision and power to to to our

60
00:01:23,289 --> 00:01:23,299
more precision and power to to to our
 

61
00:01:23,299 --> 00:01:28,700
more precision and power to to to our
charter pipeline so yeah mixed language

62
00:01:28,700 --> 00:01:28,710
charter pipeline so yeah mixed language
 

63
00:01:28,710 --> 00:01:32,179
charter pipeline so yeah mixed language
it's you know I think it's almost 15

64
00:01:32,179 --> 00:01:32,189
it's you know I think it's almost 15
 

65
00:01:32,189 --> 00:01:32,770
it's you know I think it's almost 15
years old

66
00:01:32,770 --> 00:01:32,780
years old
 

67
00:01:32,780 --> 00:01:35,450
years old
it's a DSL so you will see that some

68
00:01:35,450 --> 00:01:35,460
it's a DSL so you will see that some
 

69
00:01:35,460 --> 00:01:38,539
it's a DSL so you will see that some
areas because of that are like debugging

70
00:01:38,539 --> 00:01:38,549
areas because of that are like debugging
 

71
00:01:38,549 --> 00:01:41,660
areas because of that are like debugging
are not a good story yet it's fairly

72
00:01:41,660 --> 00:01:41,670
are not a good story yet it's fairly
 

73
00:01:41,670 --> 00:01:43,550
are not a good story yet it's fairly
functional it's namely type it's it has

74
00:01:43,550 --> 00:01:43,560
functional it's namely type it's it has
 

75
00:01:43,560 --> 00:01:47,240
functional it's namely type it's it has
lazy evaluation so I assume most of you

76
00:01:47,240 --> 00:01:47,250
lazy evaluation so I assume most of you
 

77
00:01:47,250 --> 00:01:49,639
lazy evaluation so I assume most of you
are our Haskell developers here so I

78
00:01:49,639 --> 00:01:49,649
are our Haskell developers here so I
 

79
00:01:49,649 --> 00:01:54,999
are our Haskell developers here so I
will that's assumed during this talk and

80
00:01:54,999 --> 00:01:55,009
will that's assumed during this talk and
 

81
00:01:55,009 --> 00:01:57,800
will that's assumed during this talk and
yeah this is how you basically you would

82
00:01:57,800 --> 00:01:57,810
yeah this is how you basically you would
 

83
00:01:57,810 --> 00:02:02,179
yeah this is how you basically you would
you know get started you install it

84
00:02:02,179 --> 00:02:02,189
you know get started you install it
 

85
00:02:02,189 --> 00:02:03,859
you know get started you install it
through this terrible download through

86
00:02:03,859 --> 00:02:03,869
through this terrible download through
 

87
00:02:03,869 --> 00:02:05,330
through this terrible download through
the internet thing that you know people

88
00:02:05,330 --> 00:02:05,340
the internet thing that you know people
 

89
00:02:05,340 --> 00:02:07,130
the internet thing that you know people
tell us all the time it's a terrible

90
00:02:07,130 --> 00:02:07,140
tell us all the time it's a terrible
 

91
00:02:07,140 --> 00:02:07,459
tell us all the time it's a terrible
idea

92
00:02:07,459 --> 00:02:07,469
idea
 

93
00:02:07,469 --> 00:02:09,529
idea
but how do you bootstrap a package

94
00:02:09,529 --> 00:02:09,539
but how do you bootstrap a package
 

95
00:02:09,539 --> 00:02:11,660
but how do you bootstrap a package
manager if not through internet you're

96
00:02:11,660 --> 00:02:11,670
manager if not through internet you're
 

97
00:02:11,670 --> 00:02:14,170
manager if not through internet you're
encouraged to use the GPG keys and so on

98
00:02:14,170 --> 00:02:14,180
encouraged to use the GPG keys and so on
 

99
00:02:14,180 --> 00:02:16,610
encouraged to use the GPG keys and so on
and then the current version doesn't

100
00:02:16,610 --> 00:02:16,620
and then the current version doesn't
 

101
00:02:16,620 --> 00:02:18,320
and then the current version doesn't
come with ripple but you can install it

102
00:02:18,320 --> 00:02:18,330
come with ripple but you can install it
 

103
00:02:18,330 --> 00:02:19,450
come with ripple but you can install it
and you

104
00:02:19,450 --> 00:02:19,460
and you
 

105
00:02:19,460 --> 00:02:24,190
and you
you can get started so let's let's go

106
00:02:24,190 --> 00:02:24,200
you can get started so let's let's go
 

107
00:02:24,200 --> 00:02:25,870
you can get started so let's let's go
into a language a bit I think it's good

108
00:02:25,870 --> 00:02:25,880
into a language a bit I think it's good
 

109
00:02:25,880 --> 00:02:29,100
into a language a bit I think it's good
to build that baseline through some

110
00:02:29,100 --> 00:02:29,110
to build that baseline through some
 

111
00:02:29,110 --> 00:02:34,210
to build that baseline through some
examples we we have you know it does the

112
00:02:34,210 --> 00:02:34,220
examples we we have you know it does the
 

113
00:02:34,220 --> 00:02:35,680
examples we we have you know it does the
right thing when it comes to dynamic

114
00:02:35,680 --> 00:02:35,690
right thing when it comes to dynamic
 

115
00:02:35,690 --> 00:02:38,650
right thing when it comes to dynamic
languages if you you know do try to use

116
00:02:38,650 --> 00:02:38,660
languages if you you know do try to use
 

117
00:02:38,660 --> 00:02:40,420
languages if you you know do try to use
operators that doesn't make sense it

118
00:02:40,420 --> 00:02:40,430
operators that doesn't make sense it
 

119
00:02:40,430 --> 00:02:44,790
operators that doesn't make sense it
will like error out you can query for

120
00:02:44,790 --> 00:02:44,800
will like error out you can query for
 

121
00:02:44,800 --> 00:02:50,500
will like error out you can query for
what type what type of a do you have and

122
00:02:50,500 --> 00:02:50,510
what type what type of a do you have and
 

123
00:02:50,510 --> 00:02:54,880
what type what type of a do you have and
also you can a search types and say I do

124
00:02:54,880 --> 00:02:54,890
also you can a search types and say I do
 

125
00:02:54,890 --> 00:02:58,360
also you can a search types and say I do
we have a string as I've said it's a DSL

126
00:02:58,360 --> 00:02:58,370
we have a string as I've said it's a DSL
 

127
00:02:58,370 --> 00:03:00,100
we have a string as I've said it's a DSL
for packaging so it has a kind of

128
00:03:00,100 --> 00:03:00,110
for packaging so it has a kind of
 

129
00:03:00,110 --> 00:03:01,960
for packaging so it has a kind of
special properties one of them is it has

130
00:03:01,960 --> 00:03:01,970
special properties one of them is it has
 

131
00:03:01,970 --> 00:03:04,750
special properties one of them is it has
a single quote well first of all it has

132
00:03:04,750 --> 00:03:04,760
a single quote well first of all it has
 

133
00:03:04,760 --> 00:03:06,910
a single quote well first of all it has
double quoted strings there are you know

134
00:03:06,910 --> 00:03:06,920
double quoted strings there are you know
 

135
00:03:06,920 --> 00:03:09,760
double quoted strings there are you know
the plane the thing you would expect and

136
00:03:09,760 --> 00:03:09,770
the plane the thing you would expect and
 

137
00:03:09,770 --> 00:03:11,680
the plane the thing you would expect and
then it has like this single double

138
00:03:11,680 --> 00:03:11,690
then it has like this single double
 

139
00:03:11,690 --> 00:03:13,750
then it has like this single double
single quoted strings which basically

140
00:03:13,750 --> 00:03:13,760
single quoted strings which basically
 

141
00:03:13,760 --> 00:03:15,910
single quoted strings which basically
what they do is they strip out all the

142
00:03:15,910 --> 00:03:15,920
what they do is they strip out all the
 

143
00:03:15,920 --> 00:03:20,080
what they do is they strip out all the
the indentation you will see here that

144
00:03:20,080 --> 00:03:20,090
the indentation you will see here that
 

145
00:03:20,090 --> 00:03:24,160
the indentation you will see here that
basically it it takes the most left part

146
00:03:24,160 --> 00:03:24,170
basically it it takes the most left part
 

147
00:03:24,170 --> 00:03:26,040
basically it it takes the most left part
of the string and strips everything out

148
00:03:26,040 --> 00:03:26,050
of the string and strips everything out
 

149
00:03:26,050 --> 00:03:30,130
of the string and strips everything out
and including the the prefix it keeps

150
00:03:30,130 --> 00:03:30,140
and including the the prefix it keeps
 

151
00:03:30,140 --> 00:03:33,340
and including the the prefix it keeps
the suffix new lines for example and

152
00:03:33,340 --> 00:03:33,350
the suffix new lines for example and
 

153
00:03:33,350 --> 00:03:35,410
the suffix new lines for example and
this is nice so that when you will make

154
00:03:35,410 --> 00:03:35,420
this is nice so that when you will make
 

155
00:03:35,420 --> 00:03:37,240
this is nice so that when you will make
expression and you nest them in your

156
00:03:37,240 --> 00:03:37,250
expression and you nest them in your
 

157
00:03:37,250 --> 00:03:39,510
expression and you nest them in your
editor you don't have to like always

158
00:03:39,510 --> 00:03:39,520
editor you don't have to like always
 

159
00:03:39,520 --> 00:03:42,550
editor you don't have to like always
strip that because in convicts you don't

160
00:03:42,550 --> 00:03:42,560
strip that because in convicts you don't
 

161
00:03:42,560 --> 00:03:44,410
strip that because in convicts you don't
want this indentation right so this is

162
00:03:44,410 --> 00:03:44,420
want this indentation right so this is
 

163
00:03:44,420 --> 00:03:50,290
want this indentation right so this is
kind of the the motivation behind it so

164
00:03:50,290 --> 00:03:50,300
kind of the the motivation behind it so
 

165
00:03:50,300 --> 00:03:55,620
kind of the the motivation behind it so
you just

166
00:03:55,620 --> 00:03:55,630

 

167
00:03:55,630 --> 00:03:59,200

just in just the orientation not nothing

168
00:03:59,200 --> 00:03:59,210
just in just the orientation not nothing
 

169
00:03:59,210 --> 00:04:04,270
just in just the orientation not nothing
else so it preserves everything else so

170
00:04:04,270 --> 00:04:04,280
else so it preserves everything else so
 

171
00:04:04,280 --> 00:04:06,580
else so it preserves everything else so
in Enix we have this something called

172
00:04:06,580 --> 00:04:06,590
in Enix we have this something called
 

173
00:04:06,590 --> 00:04:08,140
in Enix we have this something called
preamps these are the functions that

174
00:04:08,140 --> 00:04:08,150
preamps these are the functions that
 

175
00:04:08,150 --> 00:04:10,630
preamps these are the functions that
come with links you can see the whole

176
00:04:10,630 --> 00:04:10,640
come with links you can see the whole
 

177
00:04:10,640 --> 00:04:16,600
come with links you can see the whole
list if you just type built-ins and you

178
00:04:16,600 --> 00:04:16,610
list if you just type built-ins and you
 

179
00:04:16,610 --> 00:04:19,720
list if you just type built-ins and you
know we have something we call attribute

180
00:04:19,720 --> 00:04:19,730
know we have something we call attribute
 

181
00:04:19,730 --> 00:04:25,150
know we have something we call attribute
set up there and for example there is a

182
00:04:25,150 --> 00:04:25,160
set up there and for example there is a
 

183
00:04:25,160 --> 00:04:26,950
set up there and for example there is a
function called attribute names and you

184
00:04:26,950 --> 00:04:26,960
function called attribute names and you
 

185
00:04:26,960 --> 00:04:31,020
function called attribute names and you
can get then all the the keys in there

186
00:04:31,020 --> 00:04:31,030
can get then all the the keys in there
 

187
00:04:31,030 --> 00:04:34,720
can get then all the the keys in there
and again if you pass it like a boolean

188
00:04:34,720 --> 00:04:34,730
and again if you pass it like a boolean
 

189
00:04:34,730 --> 00:04:37,350
and again if you pass it like a boolean
and it will like say that you know

190
00:04:37,350 --> 00:04:37,360
and it will like say that you know
 

191
00:04:37,360 --> 00:04:39,670
and it will like say that you know
you're you're not doing the right thing

192
00:04:39,670 --> 00:04:39,680
you're you're not doing the right thing
 

193
00:04:39,680 --> 00:04:45,460
you're you're not doing the right thing
with right type functions that's kind of

194
00:04:45,460 --> 00:04:45,470
with right type functions that's kind of
 

195
00:04:45,470 --> 00:04:49,060
with right type functions that's kind of
the core of it right we have lambda

196
00:04:49,060 --> 00:04:49,070
the core of it right we have lambda
 

197
00:04:49,070 --> 00:04:51,750
the core of it right we have lambda
functions that's the notation at the top

198
00:04:51,750 --> 00:04:51,760
functions that's the notation at the top
 

199
00:04:51,760 --> 00:04:54,430
functions that's the notation at the top
it has the same kind of application as

200
00:04:54,430 --> 00:04:54,440
it has the same kind of application as
 

201
00:04:54,440 --> 00:04:57,310
it has the same kind of application as
Haskell and there is you know there that

202
00:04:57,310 --> 00:04:57,320
Haskell and there is you know there that
 

203
00:04:57,320 --> 00:05:01,990
Haskell and there is you know there that
the bad parts of Nyx is this where if if

204
00:05:01,990 --> 00:05:02,000
the bad parts of Nyx is this where if if
 

205
00:05:02,000 --> 00:05:04,540
the bad parts of Nyx is this where if if
you don't put a white space there it

206
00:05:04,540 --> 00:05:04,550
you don't put a white space there it
 

207
00:05:04,550 --> 00:05:11,140
you don't put a white space there it
will consider this as an URL yeah that

208
00:05:11,140 --> 00:05:11,150
will consider this as an URL yeah that
 

209
00:05:11,150 --> 00:05:12,790
will consider this as an URL yeah that
there's some bad I didn't include all of

210
00:05:12,790 --> 00:05:12,800
there's some bad I didn't include all of
 

211
00:05:12,800 --> 00:05:14,200
there's some bad I didn't include all of
them but there's there's some dark

212
00:05:14,200 --> 00:05:14,210
them but there's there's some dark
 

213
00:05:14,210 --> 00:05:15,760
them but there's there's some dark
corners um and this is really bad

214
00:05:15,760 --> 00:05:15,770
corners um and this is really bad
 

215
00:05:15,770 --> 00:05:17,290
corners um and this is really bad
because well we don't have types so

216
00:05:17,290 --> 00:05:17,300
because well we don't have types so
 

217
00:05:17,300 --> 00:05:19,300
because well we don't have types so
suddenly you know something instead of

218
00:05:19,300 --> 00:05:19,310
suddenly you know something instead of
 

219
00:05:19,310 --> 00:05:21,909
suddenly you know something instead of
getting a function gets a string and you

220
00:05:21,909 --> 00:05:21,919
getting a function gets a string and you
 

221
00:05:21,919 --> 00:05:25,260
getting a function gets a string and you
know debugging becomes a bit of Hell so

222
00:05:25,260 --> 00:05:25,270
know debugging becomes a bit of Hell so
 

223
00:05:25,270 --> 00:05:27,700
know debugging becomes a bit of Hell so
these are kind of the things I would

224
00:05:27,700 --> 00:05:27,710
these are kind of the things I would
 

225
00:05:27,710 --> 00:05:28,930
these are kind of the things I would
like to do that

226
00:05:28,930 --> 00:05:28,940
like to do that
 

227
00:05:28,940 --> 00:05:30,340
like to do that
Diggs would clean up after you know

228
00:05:30,340 --> 00:05:30,350
Diggs would clean up after you know
 

229
00:05:30,350 --> 00:05:33,940
Diggs would clean up after you know
through time but we'll see and then it

230
00:05:33,940 --> 00:05:33,950
through time but we'll see and then it
 

231
00:05:33,950 --> 00:05:35,620
through time but we'll see and then it
doesn't have well the pattern matching

232
00:05:35,620 --> 00:05:35,630
doesn't have well the pattern matching
 

233
00:05:35,630 --> 00:05:37,630
doesn't have well the pattern matching
is basically you can have these

234
00:05:37,630 --> 00:05:37,640
is basically you can have these
 

235
00:05:37,640 --> 00:05:40,720
is basically you can have these
attributes as as a you know as a

236
00:05:40,720 --> 00:05:40,730
attributes as as a you know as a
 

237
00:05:40,730 --> 00:05:44,950
attributes as as a you know as a
function input like this is a function

238
00:05:44,950 --> 00:05:44,960
function input like this is a function
 

239
00:05:44,960 --> 00:05:47,790
function input like this is a function
that accepts a and B and then you know

240
00:05:47,790 --> 00:05:47,800
that accepts a and B and then you know
 

241
00:05:47,800 --> 00:05:50,770
that accepts a and B and then you know
it uses the plus operator and Harry pass

242
00:05:50,770 --> 00:05:50,780
it uses the plus operator and Harry pass
 

243
00:05:50,780 --> 00:05:53,680
it uses the plus operator and Harry pass
a and B and we get for out this is like

244
00:05:53,680 --> 00:05:53,690
a and B and we get for out this is like
 

245
00:05:53,690 --> 00:05:56,320
a and B and we get for out this is like
the core of Nyx where you pass packages

246
00:05:56,320 --> 00:05:56,330
the core of Nyx where you pass packages
 

247
00:05:56,330 --> 00:05:58,180
the core of Nyx where you pass packages
and attribute sets in and then you do

248
00:05:58,180 --> 00:05:58,190
and attribute sets in and then you do
 

249
00:05:58,190 --> 00:05:59,980
and attribute sets in and then you do
something with them you wouldn't use

250
00:05:59,980 --> 00:05:59,990
something with them you wouldn't use
 

251
00:05:59,990 --> 00:06:03,040
something with them you wouldn't use
integers usually the main type is all

252
00:06:03,040 --> 00:06:03,050
integers usually the main type is all
 

253
00:06:03,050 --> 00:06:04,810
integers usually the main type is all
attribute sets all the way in index

254
00:06:04,810 --> 00:06:04,820
attribute sets all the way in index
 

255
00:06:04,820 --> 00:06:06,330
attribute sets all the way in index
everything else is like

256
00:06:06,330 --> 00:06:06,340
everything else is like
 

257
00:06:06,340 --> 00:06:10,020
everything else is like
secondary and then there's also defaults

258
00:06:10,020 --> 00:06:10,030
secondary and then there's also defaults
 

259
00:06:10,030 --> 00:06:13,860
secondary and then there's also defaults
in attribute and attribute sets when

260
00:06:13,860 --> 00:06:13,870
in attribute and attribute sets when
 

261
00:06:13,870 --> 00:06:16,920
in attribute and attribute sets when
they're you know as a pattern match for

262
00:06:16,920 --> 00:06:16,930
they're you know as a pattern match for
 

263
00:06:16,930 --> 00:06:18,719
they're you know as a pattern match for
the for the function so you can say that

264
00:06:18,719 --> 00:06:18,729
the for the function so you can say that
 

265
00:06:18,729 --> 00:06:21,090
the for the function so you can say that
if you don't pass a it's true and then

266
00:06:21,090 --> 00:06:21,100
if you don't pass a it's true and then
 

267
00:06:21,100 --> 00:06:23,969
if you don't pass a it's true and then
if you pass an attribute at empty an

268
00:06:23,969 --> 00:06:23,979
if you pass an attribute at empty an
 

269
00:06:23,979 --> 00:06:26,340
if you pass an attribute at empty an
attribute set you get a false back but

270
00:06:26,340 --> 00:06:26,350
attribute set you get a false back but
 

271
00:06:26,350 --> 00:06:28,800
attribute set you get a false back but
if you pass it in then you get you know

272
00:06:28,800 --> 00:06:28,810
if you pass it in then you get you know
 

273
00:06:28,810 --> 00:06:31,680
if you pass it in then you get you know
the logical thing now this is also kind

274
00:06:31,680 --> 00:06:31,690
the logical thing now this is also kind
 

275
00:06:31,690 --> 00:06:34,140
the logical thing now this is also kind
of useful to set defaults when when

276
00:06:34,140 --> 00:06:34,150
of useful to set defaults when when
 

277
00:06:34,150 --> 00:06:35,670
of useful to set defaults when when
there's you know something not saying

278
00:06:35,670 --> 00:06:35,680
there's you know something not saying
 

279
00:06:35,680 --> 00:06:39,890
there's you know something not saying
we'll see that later on there's these

280
00:06:39,890 --> 00:06:39,900
we'll see that later on there's these
 

281
00:06:39,900 --> 00:06:42,900
we'll see that later on there's these
you can get all of the all of the inputs

282
00:06:42,900 --> 00:06:42,910
you can get all of the all of the inputs
 

283
00:06:42,910 --> 00:06:47,490
you can get all of the all of the inputs
in in the arcs and there is one caveat

284
00:06:47,490 --> 00:06:47,500
in in the arcs and there is one caveat
 

285
00:06:47,500 --> 00:06:49,920
in in the arcs and there is one caveat
there the defaults are not included so

286
00:06:49,920 --> 00:06:49,930
there the defaults are not included so
 

287
00:06:49,930 --> 00:06:52,620
there the defaults are not included so
if you have a default like this and you

288
00:06:52,620 --> 00:06:52,630
if you have a default like this and you
 

289
00:06:52,630 --> 00:06:55,920
if you have a default like this and you
don't pass a explicitly in the the arcs

290
00:06:55,920 --> 00:06:55,930
don't pass a explicitly in the the arcs
 

291
00:06:55,930 --> 00:06:57,810
don't pass a explicitly in the the arcs
will be will not include it that's

292
00:06:57,810 --> 00:06:57,820
will be will not include it that's
 

293
00:06:57,820 --> 00:07:00,960
will be will not include it that's
another trick that another tricky thing

294
00:07:00,960 --> 00:07:00,970
another trick that another tricky thing
 

295
00:07:00,970 --> 00:07:06,930
another trick that another tricky thing
that yeah hunt hunts you and then

296
00:07:06,930 --> 00:07:06,940
that yeah hunt hunts you and then
 

297
00:07:06,940 --> 00:07:09,360
that yeah hunt hunts you and then
there's some you know syntactic sugars

298
00:07:09,360 --> 00:07:09,370
there's some you know syntactic sugars
 

299
00:07:09,370 --> 00:07:12,840
there's some you know syntactic sugars
around it like if you if you we have the

300
00:07:12,840 --> 00:07:12,850
around it like if you if you we have the
 

301
00:07:12,850 --> 00:07:14,940
around it like if you if you we have the
light in okay that's pretty obvious if

302
00:07:14,940 --> 00:07:14,950
light in okay that's pretty obvious if
 

303
00:07:14,950 --> 00:07:16,730
light in okay that's pretty obvious if
we have an attribute set like upstream

304
00:07:16,730 --> 00:07:16,740
we have an attribute set like upstream
 

305
00:07:16,740 --> 00:07:19,590
we have an attribute set like upstream
we can create another attribute set by

306
00:07:19,590 --> 00:07:19,600
we can create another attribute set by
 

307
00:07:19,600 --> 00:07:23,820
we can create another attribute set by
you know using the dot something more

308
00:07:23,820 --> 00:07:23,830
you know using the dot something more
 

309
00:07:23,830 --> 00:07:26,730
you know using the dot something more
from from the guys using pure script or

310
00:07:26,730 --> 00:07:26,740
from from the guys using pure script or
 

311
00:07:26,740 --> 00:07:32,640
from from the guys using pure script or
Elm and and the you know the shorter

312
00:07:32,640 --> 00:07:32,650
Elm and and the you know the shorter
 

313
00:07:32,650 --> 00:07:34,110
Elm and and the you know the shorter
version is to use inherit which

314
00:07:34,110 --> 00:07:34,120
version is to use inherit which
 

315
00:07:34,120 --> 00:07:36,240
version is to use inherit which
basically means take the upstream

316
00:07:36,240 --> 00:07:36,250
basically means take the upstream
 

317
00:07:36,250 --> 00:07:39,060
basically means take the upstream
attribute set and then you know inherits

318
00:07:39,060 --> 00:07:39,070
attribute set and then you know inherits
 

319
00:07:39,070 --> 00:07:46,670
attribute set and then you know inherits
a and B from it any questions so far

320
00:07:46,670 --> 00:07:46,680
a and B from it any questions so far
 

321
00:07:46,680 --> 00:07:49,950
a and B from it any questions so far
right pretty basic and then there is

322
00:07:49,950 --> 00:07:49,960
right pretty basic and then there is
 

323
00:07:49,960 --> 00:07:54,089
right pretty basic and then there is
this recursive function that basically

324
00:07:54,089 --> 00:07:54,099
this recursive function that basically
 

325
00:07:54,099 --> 00:07:56,279
this recursive function that basically
you can have an attribute set that that

326
00:07:56,279 --> 00:07:56,289
you can have an attribute set that that
 

327
00:07:56,289 --> 00:07:59,700
you can have an attribute set that that
references other other values within

328
00:07:59,700 --> 00:07:59,710
references other other values within
 

329
00:07:59,710 --> 00:08:01,740
references other other values within
itself instead of doing this let in at

330
00:08:01,740 --> 00:08:01,750
itself instead of doing this let in at
 

331
00:08:01,750 --> 00:08:08,610
itself instead of doing this let in at
the top yeah basic so and there is this

332
00:08:08,610 --> 00:08:08,620
the top yeah basic so and there is this
 

333
00:08:08,620 --> 00:08:10,770
the top yeah basic so and there is this
width which basically means declares the

334
00:08:10,770 --> 00:08:10,780
width which basically means declares the
 

335
00:08:10,780 --> 00:08:12,029
width which basically means declares the
namespace so if you have an attribute

336
00:08:12,029 --> 00:08:12,039
namespace so if you have an attribute
 

337
00:08:12,039 --> 00:08:14,100
namespace so if you have an attribute
set and you say with this attribute set

338
00:08:14,100 --> 00:08:14,110
set and you say with this attribute set
 

339
00:08:14,110 --> 00:08:18,209
set and you say with this attribute set
then you don't have to always prefix

340
00:08:18,209 --> 00:08:18,219
then you don't have to always prefix
 

341
00:08:18,219 --> 00:08:19,020
then you don't have to always prefix
that

342
00:08:19,020 --> 00:08:19,030
that
 

343
00:08:19,030 --> 00:08:20,880
that
it says and you can just go we usually

344
00:08:20,880 --> 00:08:20,890
it says and you can just go we usually
 

345
00:08:20,890 --> 00:08:23,100
it says and you can just go we usually
use this for a big package set so you

346
00:08:23,100 --> 00:08:23,110
use this for a big package set so you
 

347
00:08:23,110 --> 00:08:25,290
use this for a big package set so you
don't have to say packages dot blah blah

348
00:08:25,290 --> 00:08:25,300
don't have to say packages dot blah blah
 

349
00:08:25,300 --> 00:08:29,700
don't have to say packages dot blah blah
blah one one thing that's really tricky

350
00:08:29,700 --> 00:08:29,710
blah one one thing that's really tricky
 

351
00:08:29,710 --> 00:08:31,740
blah one one thing that's really tricky
with with statements if you have with

352
00:08:31,740 --> 00:08:31,750
with with statements if you have with
 

353
00:08:31,750 --> 00:08:35,040
with with statements if you have with
eggs and with you know epsilon the the

354
00:08:35,040 --> 00:08:35,050
eggs and with you know epsilon the the
 

355
00:08:35,050 --> 00:08:37,380
eggs and with you know epsilon the the
first one prevails after the second one

356
00:08:37,380 --> 00:08:37,390
first one prevails after the second one
 

357
00:08:37,390 --> 00:08:40,860
first one prevails after the second one
so it doesn't overwrite which is really

358
00:08:40,860 --> 00:08:40,870
so it doesn't overwrite which is really
 

359
00:08:40,870 --> 00:08:45,600
so it doesn't overwrite which is really
an iterative and you have lists yeah

360
00:08:45,600 --> 00:08:45,610
an iterative and you have lists yeah
 

361
00:08:45,610 --> 00:08:48,120
an iterative and you have lists yeah
they're without commas so anything you

362
00:08:48,120 --> 00:08:48,130
they're without commas so anything you
 

363
00:08:48,130 --> 00:08:49,320
they're without commas so anything you
do in here you have to put in

364
00:08:49,320 --> 00:08:49,330
do in here you have to put in
 

365
00:08:49,330 --> 00:08:51,240
do in here you have to put in
parentheses otherwise you will you know

366
00:08:51,240 --> 00:08:51,250
parentheses otherwise you will you know
 

367
00:08:51,250 --> 00:08:54,480
parentheses otherwise you will you know
you won't get if you have a function and

368
00:08:54,480 --> 00:08:54,490
you won't get if you have a function and
 

369
00:08:54,490 --> 00:08:57,600
you won't get if you have a function and
you want to you know call it inside the

370
00:08:57,600 --> 00:08:57,610
you want to you know call it inside the
 

371
00:08:57,610 --> 00:08:59,790
you want to you know call it inside the
list as an expression you have to put it

372
00:08:59,790 --> 00:08:59,800
list as an expression you have to put it
 

373
00:08:59,800 --> 00:09:01,350
list as an expression you have to put it
in parenthesis otherwise you'll get real

374
00:09:01,350 --> 00:09:01,360
in parenthesis otherwise you'll get real
 

375
00:09:01,360 --> 00:09:04,160
in parenthesis otherwise you'll get real
results as I've said it's a language

376
00:09:04,160 --> 00:09:04,170
results as I've said it's a language
 

377
00:09:04,170 --> 00:09:07,980
results as I've said it's a language
language we have these imports statement

378
00:09:07,980 --> 00:09:07,990
language we have these imports statement
 

379
00:09:07,990 --> 00:09:10,350
language we have these imports statement
that basically means it doesn't have

380
00:09:10,350 --> 00:09:10,360
that basically means it doesn't have
 

381
00:09:10,360 --> 00:09:11,910
that basically means it doesn't have
modules at all where you basically

382
00:09:11,910 --> 00:09:11,920
modules at all where you basically
 

383
00:09:11,920 --> 00:09:15,840
modules at all where you basically
import everything that a file returns or

384
00:09:15,840 --> 00:09:15,850
import everything that a file returns or
 

385
00:09:15,850 --> 00:09:20,190
import everything that a file returns or
a function returns in a file so if we

386
00:09:20,190 --> 00:09:20,200
a function returns in a file so if we
 

387
00:09:20,200 --> 00:09:23,930
a function returns in a file so if we
have a a file and and B annex and B Unix

388
00:09:23,930 --> 00:09:23,940
have a a file and and B annex and B Unix
 

389
00:09:23,940 --> 00:09:29,070
have a a file and and B annex and B Unix
you can cross cross import and if you

390
00:09:29,070 --> 00:09:29,080
you can cross cross import and if you
 

391
00:09:29,080 --> 00:09:31,770
you can cross cross import and if you
use instantiate command you can evaluate

392
00:09:31,770 --> 00:09:31,780
use instantiate command you can evaluate
 

393
00:09:31,780 --> 00:09:44,850
use instantiate command you can evaluate
it and so yeah and then you can say you

394
00:09:44,850 --> 00:09:44,860
it and so yeah and then you can say you
 

395
00:09:44,860 --> 00:09:46,170
it and so yeah and then you can say you
know then you can use the attributes

396
00:09:46,170 --> 00:09:46,180
know then you can use the attributes
 

397
00:09:46,180 --> 00:09:48,330
know then you can use the attributes
after you get three chambers

398
00:09:48,330 --> 00:09:48,340
after you get three chambers
 

399
00:09:48,340 --> 00:09:50,820
after you get three chambers
this is kind of like the the core of how

400
00:09:50,820 --> 00:09:50,830
this is kind of like the the core of how
 

401
00:09:50,830 --> 00:09:57,650
this is kind of like the the core of how
packages work trainings

402
00:09:57,650 --> 00:09:57,660

 

403
00:09:57,660 --> 00:10:02,070

yeah that's usually yeah you get usually

404
00:10:02,070 --> 00:10:02,080
yeah that's usually yeah you get usually
 

405
00:10:02,080 --> 00:10:03,720
yeah that's usually yeah you get usually
what you do you have a top level

406
00:10:03,720 --> 00:10:03,730
what you do you have a top level
 

407
00:10:03,730 --> 00:10:05,280
what you do you have a top level
function in the file which is like an

408
00:10:05,280 --> 00:10:05,290
function in the file which is like an
 

409
00:10:05,290 --> 00:10:06,990
function in the file which is like an
attribute set where your pet remains the

410
00:10:06,990 --> 00:10:07,000
attribute set where your pet remains the
 

411
00:10:07,000 --> 00:10:09,120
attribute set where your pet remains the
attribute set and you know you you kind

412
00:10:09,120 --> 00:10:09,130
attribute set and you know you you kind
 

413
00:10:09,130 --> 00:10:11,010
attribute set and you know you you kind
of get the the inputs and then you

414
00:10:11,010 --> 00:10:11,020
of get the the inputs and then you
 

415
00:10:11,020 --> 00:10:13,050
of get the the inputs and then you
return an attribute set of off packages

416
00:10:13,050 --> 00:10:13,060
return an attribute set of off packages
 

417
00:10:13,060 --> 00:10:20,400
return an attribute set of off packages
and things you want to it which it

418
00:10:20,400 --> 00:10:20,410
and things you want to it which it
 

419
00:10:20,410 --> 00:10:24,660
and things you want to it which it
wouldn't have fully evaluate well in

420
00:10:24,660 --> 00:10:24,670
wouldn't have fully evaluate well in
 

421
00:10:24,670 --> 00:10:29,490
wouldn't have fully evaluate well in
this case B and in this case a right it

422
00:10:29,490 --> 00:10:29,500
this case B and in this case a right it
 

423
00:10:29,500 --> 00:10:36,390
this case B and in this case a right it
was just a code chunk whatever yeah and

424
00:10:36,390 --> 00:10:36,400
was just a code chunk whatever yeah and
 

425
00:10:36,400 --> 00:10:40,170
was just a code chunk whatever yeah and
we have paths one of the another one

426
00:10:40,170 --> 00:10:40,180
we have paths one of the another one
 

427
00:10:40,180 --> 00:10:42,750
we have paths one of the another one
quirk is if you want to refer to a

428
00:10:42,750 --> 00:10:42,760
quirk is if you want to refer to a
 

429
00:10:42,760 --> 00:10:44,640
quirk is if you want to refer to a
current path you have to do dot slash

430
00:10:44,640 --> 00:10:44,650
current path you have to do dot slash
 

431
00:10:44,650 --> 00:10:50,340
current path you have to do dot slash
dot which is again something if you if

432
00:10:50,340 --> 00:10:50,350
dot which is again something if you if
 

433
00:10:50,350 --> 00:10:51,960
dot which is again something if you if
somebody doesn't tell you you say dot

434
00:10:51,960 --> 00:10:51,970
somebody doesn't tell you you say dot
 

435
00:10:51,970 --> 00:10:53,730
somebody doesn't tell you you say dot
and and it's it's it's like an edge

436
00:10:53,730 --> 00:10:53,740
and and it's it's it's like an edge
 

437
00:10:53,740 --> 00:10:55,860
and and it's it's it's like an edge
pivot set X's I think and then you know

438
00:10:55,860 --> 00:10:55,870
pivot set X's I think and then you know
 

439
00:10:55,870 --> 00:10:58,980
pivot set X's I think and then you know
weird errors happen again mix was never

440
00:10:58,980 --> 00:10:58,990
weird errors happen again mix was never
 

441
00:10:58,990 --> 00:11:01,110
weird errors happen again mix was never
meant to be successful and you can see

442
00:11:01,110 --> 00:11:01,120
meant to be successful and you can see
 

443
00:11:01,120 --> 00:11:06,630
meant to be successful and you can see
that in some places and yeah we

444
00:11:06,630 --> 00:11:06,640
that in some places and yeah we
 

445
00:11:06,640 --> 00:11:08,610
that in some places and yeah we
differentiate between strings and and

446
00:11:08,610 --> 00:11:08,620
differentiate between strings and and
 

447
00:11:08,620 --> 00:11:13,080
differentiate between strings and and
paths and I have have a blog post in

448
00:11:13,080 --> 00:11:13,090
paths and I have have a blog post in
 

449
00:11:13,090 --> 00:11:15,120
paths and I have have a blog post in
progress that kind of explains it's

450
00:11:15,120 --> 00:11:15,130
progress that kind of explains it's
 

451
00:11:15,130 --> 00:11:17,460
progress that kind of explains it's
pretty actually complex how onyx handles

452
00:11:17,460 --> 00:11:17,470
pretty actually complex how onyx handles
 

453
00:11:17,470 --> 00:11:19,680
pretty actually complex how onyx handles
the difference so I won't go into that

454
00:11:19,680 --> 00:11:19,690
the difference so I won't go into that
 

455
00:11:19,690 --> 00:11:23,160
the difference so I won't go into that
now sorry maybe maybe we can yeah maybe

456
00:11:23,160 --> 00:11:23,170
now sorry maybe maybe we can yeah maybe
 

457
00:11:23,170 --> 00:11:25,110
now sorry maybe maybe we can yeah maybe
maybe I published that dog dose and you

458
00:11:25,110 --> 00:11:25,120
maybe I published that dog dose and you
 

459
00:11:25,120 --> 00:11:26,460
maybe I published that dog dose and you
can read it and tell me if that makes

460
00:11:26,460 --> 00:11:26,470
can read it and tell me if that makes
 

461
00:11:26,470 --> 00:11:27,150
can read it and tell me if that makes
sense

462
00:11:27,150 --> 00:11:27,160
sense
 

463
00:11:27,160 --> 00:11:29,970
sense
and then it has kind of three ways to

464
00:11:29,970 --> 00:11:29,980
and then it has kind of three ways to
 

465
00:11:29,980 --> 00:11:32,190
and then it has kind of three ways to
the exceptions one is well just to

466
00:11:32,190 --> 00:11:32,200
the exceptions one is well just to
 

467
00:11:32,200 --> 00:11:35,100
the exceptions one is well just to
forget the try evil for now if you say a

468
00:11:35,100 --> 00:11:35,110
forget the try evil for now if you say a
 

469
00:11:35,110 --> 00:11:36,750
forget the try evil for now if you say a
board that's like you know aborts

470
00:11:36,750 --> 00:11:36,760
board that's like you know aborts
 

471
00:11:36,760 --> 00:11:39,090
board that's like you know aborts
evaluation and there is no way to to to

472
00:11:39,090 --> 00:11:39,100
evaluation and there is no way to to to
 

473
00:11:39,100 --> 00:11:43,050
evaluation and there is no way to to to
to go around that there is the tro which

474
00:11:43,050 --> 00:11:43,060
to go around that there is the tro which
 

475
00:11:43,060 --> 00:11:45,150
to go around that there is the tro which
you can actually then catch retry evil

476
00:11:45,150 --> 00:11:45,160
you can actually then catch retry evil
 

477
00:11:45,160 --> 00:11:47,700
you can actually then catch retry evil
and it says you know either success is

478
00:11:47,700 --> 00:11:47,710
and it says you know either success is
 

479
00:11:47,710 --> 00:11:50,100
and it says you know either success is
true or false and then either you get

480
00:11:50,100 --> 00:11:50,110
true or false and then either you get
 

481
00:11:50,110 --> 00:11:53,610
true or false and then either you get
the value or you don't get the value and

482
00:11:53,610 --> 00:11:53,620
the value or you don't get the value and
 

483
00:11:53,620 --> 00:11:55,260
the value or you don't get the value and
this is what we do in x packages to

484
00:11:55,260 --> 00:11:55,270
this is what we do in x packages to
 

485
00:11:55,270 --> 00:11:57,000
this is what we do in x packages to
evaluate each package because if one

486
00:11:57,000 --> 00:11:57,010
evaluate each package because if one
 

487
00:11:57,010 --> 00:11:58,410
evaluate each package because if one
fails we don't want the whole thing to

488
00:11:58,410 --> 00:11:58,420
fails we don't want the whole thing to
 

489
00:11:58,420 --> 00:12:01,200
fails we don't want the whole thing to
fail and then we just print out the

490
00:12:01,200 --> 00:12:01,210
fail and then we just print out the
 

491
00:12:01,210 --> 00:12:03,600
fail and then we just print out the
error and we go on and then there

492
00:12:03,600 --> 00:12:03,610
error and we go on and then there
 

493
00:12:03,610 --> 00:12:05,220
error and we go on and then there
there's also the assert so a third

494
00:12:05,220 --> 00:12:05,230
there's also the assert so a third
 

495
00:12:05,230 --> 00:12:06,990
there's also the assert so a third
expression and another expression that's

496
00:12:06,990 --> 00:12:07,000
expression and another expression that's
 

497
00:12:07,000 --> 00:12:09,390
expression and another expression that's
follows and you can also

498
00:12:09,390 --> 00:12:09,400
follows and you can also
 

499
00:12:09,400 --> 00:12:13,680
follows and you can also
catch that with a try evil yeah this is

500
00:12:13,680 --> 00:12:13,690
catch that with a try evil yeah this is
 

501
00:12:13,690 --> 00:12:16,830
catch that with a try evil yeah this is
another great area dark area where it's

502
00:12:16,830 --> 00:12:16,840
another great area dark area where it's
 

503
00:12:16,840 --> 00:12:20,130
another great area dark area where it's
kind of tricky a lot of times to be

504
00:12:20,130 --> 00:12:20,140
kind of tricky a lot of times to be
 

505
00:12:20,140 --> 00:12:22,470
kind of tricky a lot of times to be
precise of what areas you want to catch

506
00:12:22,470 --> 00:12:22,480
precise of what areas you want to catch
 

507
00:12:22,480 --> 00:12:24,000
precise of what areas you want to catch
and what you what areas you don't want

508
00:12:24,000 --> 00:12:24,010
and what you what areas you don't want
 

509
00:12:24,010 --> 00:12:26,810
and what you what areas you don't want
to catch there's not enough precision

510
00:12:26,810 --> 00:12:26,820
to catch there's not enough precision
 

511
00:12:26,820 --> 00:12:29,190
to catch there's not enough precision
and then there's there's buildings like

512
00:12:29,190 --> 00:12:29,200
and then there's there's buildings like
 

513
00:12:29,200 --> 00:12:31,410
and then there's there's buildings like
read file and you know if you have a

514
00:12:31,410 --> 00:12:31,420
read file and you know if you have a
 

515
00:12:31,420 --> 00:12:33,630
read file and you know if you have a
file foo and it has contents bar you

516
00:12:33,630 --> 00:12:33,640
file foo and it has contents bar you
 

517
00:12:33,640 --> 00:12:35,760
file foo and it has contents bar you
actually get that back so the question

518
00:12:35,760 --> 00:12:35,770
actually get that back so the question
 

519
00:12:35,770 --> 00:12:38,460
actually get that back so the question
is where's the purity right that it's

520
00:12:38,460 --> 00:12:38,470
is where's the purity right that it's
 

521
00:12:38,470 --> 00:12:41,040
is where's the purity right that it's
it's not we don't have types so we

522
00:12:41,040 --> 00:12:41,050
it's not we don't have types so we
 

523
00:12:41,050 --> 00:12:42,810
it's not we don't have types so we
where's the dick you know where do we

524
00:12:42,810 --> 00:12:42,820
where's the dick you know where do we
 

525
00:12:42,820 --> 00:12:45,270
where's the dick you know where do we
declare purity so NYX has a bit

526
00:12:45,270 --> 00:12:45,280
declare purity so NYX has a bit
 

527
00:12:45,280 --> 00:12:50,910
declare purity so NYX has a bit
different model than Haskell so yeah

528
00:12:50,910 --> 00:12:50,920
different model than Haskell so yeah
 

529
00:12:50,920 --> 00:12:52,770
different model than Haskell so yeah
let's let's look at that so for now we

530
00:12:52,770 --> 00:12:52,780
let's let's look at that so for now we
 

531
00:12:52,780 --> 00:12:54,750
let's let's look at that so for now we
have this basic language it has you know

532
00:12:54,750 --> 00:12:54,760
have this basic language it has you know
 

533
00:12:54,760 --> 00:12:57,330
have this basic language it has you know
attribute set list blah blah blah but

534
00:12:57,330 --> 00:12:57,340
attribute set list blah blah blah but
 

535
00:12:57,340 --> 00:12:59,490
attribute set list blah blah blah but
it's very pure we cannot interact with

536
00:12:59,490 --> 00:12:59,500
it's very pure we cannot interact with
 

537
00:12:59,500 --> 00:13:01,890
it's very pure we cannot interact with
the world right it's pretty boring now

538
00:13:01,890 --> 00:13:01,900
the world right it's pretty boring now
 

539
00:13:01,900 --> 00:13:05,430
the world right it's pretty boring now
now this is where the gist of it comes

540
00:13:05,430 --> 00:13:05,440
now this is where the gist of it comes
 

541
00:13:05,440 --> 00:13:08,520
now this is where the gist of it comes
in the derivations and the derivations

542
00:13:08,520 --> 00:13:08,530
in the derivations and the derivations
 

543
00:13:08,530 --> 00:13:11,820
in the derivations and the derivations
they produce build products and you know

544
00:13:11,820 --> 00:13:11,830
they produce build products and you know
 

545
00:13:11,830 --> 00:13:14,970
they produce build products and you know
from so from expression to a derivation

546
00:13:14,970 --> 00:13:14,980
from so from expression to a derivation
 

547
00:13:14,980 --> 00:13:17,760
from so from expression to a derivation
this process is called evaluation time

548
00:13:17,760 --> 00:13:17,770
this process is called evaluation time
 

549
00:13:17,770 --> 00:13:20,580
this process is called evaluation time
so we take NYX you know files and you

550
00:13:20,580 --> 00:13:20,590
so we take NYX you know files and you
 

551
00:13:20,590 --> 00:13:23,220
so we take NYX you know files and you
create you evaluate them you get a

552
00:13:23,220 --> 00:13:23,230
create you evaluate them you get a
 

553
00:13:23,230 --> 00:13:26,220
create you evaluate them you get a
derivation files and then if you realize

554
00:13:26,220 --> 00:13:26,230
derivation files and then if you realize
 

555
00:13:26,230 --> 00:13:28,770
derivation files and then if you realize
they're evasions you get build products

556
00:13:28,770 --> 00:13:28,780
they're evasions you get build products
 

557
00:13:28,780 --> 00:13:31,350
they're evasions you get build products
so it's a two-step thing and the reason

558
00:13:31,350 --> 00:13:31,360
so it's a two-step thing and the reason
 

559
00:13:31,360 --> 00:13:33,690
so it's a two-step thing and the reason
why that that's the case is you might

560
00:13:33,690 --> 00:13:33,700
why that that's the case is you might
 

561
00:13:33,700 --> 00:13:36,900
why that that's the case is you might
want to evaluate NYX get the derivation

562
00:13:36,900 --> 00:13:36,910
want to evaluate NYX get the derivation
 

563
00:13:36,910 --> 00:13:39,780
want to evaluate NYX get the derivation
files copy to you know distributed over

564
00:13:39,780 --> 00:13:39,790
files copy to you know distributed over
 

565
00:13:39,790 --> 00:13:41,190
files copy to you know distributed over
machines and then you want to realize

566
00:13:41,190 --> 00:13:41,200
machines and then you want to realize
 

567
00:13:41,200 --> 00:13:45,330
machines and then you want to realize
them so it helped that's why the it's a

568
00:13:45,330 --> 00:13:45,340
them so it helped that's why the it's a
 

569
00:13:45,340 --> 00:13:47,580
them so it helped that's why the it's a
two-step thing so the derivations are

570
00:13:47,580 --> 00:13:47,590
two-step thing so the derivations are
 

571
00:13:47,590 --> 00:13:50,040
two-step thing so the derivations are
basically intermediate representation of

572
00:13:50,040 --> 00:13:50,050
basically intermediate representation of
 

573
00:13:50,050 --> 00:13:55,140
basically intermediate representation of
Niki's expressions fully evaluated so oh

574
00:13:55,140 --> 00:13:55,150
Niki's expressions fully evaluated so oh
 

575
00:13:55,150 --> 00:13:57,450
Niki's expressions fully evaluated so oh
let's say we have a very simple C

576
00:13:57,450 --> 00:13:57,460
let's say we have a very simple C
 

577
00:13:57,460 --> 00:13:59,130
let's say we have a very simple C
program which basically only does it

578
00:13:59,130 --> 00:13:59,140
program which basically only does it
 

579
00:13:59,140 --> 00:14:01,590
program which basically only does it
gets an environment variable out and

580
00:14:01,590 --> 00:14:01,600
gets an environment variable out and
 

581
00:14:01,600 --> 00:14:04,530
gets an environment variable out and
then you know it creates the file we

582
00:14:04,530 --> 00:14:04,540
then you know it creates the file we
 

583
00:14:04,540 --> 00:14:08,580
then you know it creates the file we
compile it and this would be our most

584
00:14:08,580 --> 00:14:08,590
compile it and this would be our most
 

585
00:14:08,590 --> 00:14:11,700
compile it and this would be our most
simple derivation up there it requires

586
00:14:11,700 --> 00:14:11,710
simple derivation up there it requires
 

587
00:14:11,710 --> 00:14:14,940
simple derivation up there it requires
three fields the name what system is

588
00:14:14,940 --> 00:14:14,950
three fields the name what system is
 

589
00:14:14,950 --> 00:14:17,850
three fields the name what system is
going to build on and what's the Builder

590
00:14:17,850 --> 00:14:17,860
going to build on and what's the Builder
 

591
00:14:17,860 --> 00:14:20,390
going to build on and what's the Builder
the Builder is an executable that

592
00:14:20,390 --> 00:14:20,400
the Builder is an executable that
 

593
00:14:20,400 --> 00:14:22,210
the Builder is an executable that
creates the

594
00:14:22,210 --> 00:14:22,220
creates the
 

595
00:14:22,220 --> 00:14:24,910
creates the
the output path that's the that's the

596
00:14:24,910 --> 00:14:24,920
the output path that's the that's the
 

597
00:14:24,920 --> 00:14:28,330
the output path that's the that's the
minimum thing it has to do and down here

598
00:14:28,330 --> 00:14:28,340
minimum thing it has to do and down here
 

599
00:14:28,340 --> 00:14:31,090
minimum thing it has to do and down here
we see this process so this is

600
00:14:31,090 --> 00:14:31,100
we see this process so this is
 

601
00:14:31,100 --> 00:14:33,850
we see this process so this is
evaluation which you know goes for mixed

602
00:14:33,850 --> 00:14:33,860
evaluation which you know goes for mixed
 

603
00:14:33,860 --> 00:14:35,710
evaluation which you know goes for mixed
expression into the duration file and

604
00:14:35,710 --> 00:14:35,720
expression into the duration file and
 

605
00:14:35,720 --> 00:14:38,560
expression into the duration file and
you see this long hash and then next or

606
00:14:38,560 --> 00:14:38,570
you see this long hash and then next or
 

607
00:14:38,570 --> 00:14:41,020
you see this long hash and then next or
minus our realizes that and builds it

608
00:14:41,020 --> 00:14:41,030
minus our realizes that and builds it
 

609
00:14:41,030 --> 00:14:43,240
minus our realizes that and builds it
into and calls the builder to produce

610
00:14:43,240 --> 00:14:43,250
into and calls the builder to produce
 

611
00:14:43,250 --> 00:14:46,600
into and calls the builder to produce
the output path so for those that use

612
00:14:46,600 --> 00:14:46,610
the output path so for those that use
 

613
00:14:46,610 --> 00:14:49,360
the output path so for those that use
Nix Nix build is basically you know

614
00:14:49,360 --> 00:14:49,370
Nix Nix build is basically you know
 

615
00:14:49,370 --> 00:14:53,140
Nix Nix build is basically you know
those two steps combined essentially as

616
00:14:53,140 --> 00:14:53,150
those two steps combined essentially as
 

617
00:14:53,150 --> 00:14:56,770
those two steps combined essentially as
a convenience if you're on this if

618
00:14:56,770 --> 00:14:56,780
a convenience if you're on this if
 

619
00:14:56,780 --> 00:14:58,630
a convenience if you're on this if
you're building and in realizing on the

620
00:14:58,630 --> 00:14:58,640
you're building and in realizing on the
 

621
00:14:58,640 --> 00:15:03,040
you're building and in realizing on the
same host that you use Nix build so so

622
00:15:03,040 --> 00:15:03,050
same host that you use Nix build so so
 

623
00:15:03,050 --> 00:15:04,840
same host that you use Nix build so so
then comes the question of where is this

624
00:15:04,840 --> 00:15:04,850
then comes the question of where is this
 

625
00:15:04,850 --> 00:15:08,020
then comes the question of where is this
hash coming from this has is a hash of

626
00:15:08,020 --> 00:15:08,030
hash coming from this has is a hash of
 

627
00:15:08,030 --> 00:15:10,060
hash coming from this has is a hash of
all the inputs for for the derivation

628
00:15:10,060 --> 00:15:10,070
all the inputs for for the derivation
 

629
00:15:10,070 --> 00:15:12,780
all the inputs for for the derivation
right so it's basically content and rest

630
00:15:12,780 --> 00:15:12,790
right so it's basically content and rest
 

631
00:15:12,790 --> 00:15:16,270
right so it's basically content and rest
and and and and this is where the purity

632
00:15:16,270 --> 00:15:16,280
and and and and this is where the purity
 

633
00:15:16,280 --> 00:15:18,490
and and and and this is where the purity
comes in the relation is built in a

634
00:15:18,490 --> 00:15:18,500
comes in the relation is built in a
 

635
00:15:18,500 --> 00:15:20,710
comes in the relation is built in a
sandbox like separated from the file

636
00:15:20,710 --> 00:15:20,720
sandbox like separated from the file
 

637
00:15:20,720 --> 00:15:22,930
sandbox like separated from the file
system disabled networking everything

638
00:15:22,930 --> 00:15:22,940
system disabled networking everything
 

639
00:15:22,940 --> 00:15:25,570
system disabled networking everything
and and all the things that are allowed

640
00:15:25,570 --> 00:15:25,580
and and all the things that are allowed
 

641
00:15:25,580 --> 00:15:28,030
and and all the things that are allowed
to influence that that builder are

642
00:15:28,030 --> 00:15:28,040
to influence that that builder are
 

643
00:15:28,040 --> 00:15:31,320
to influence that that builder are
coming from the derivation attributes

644
00:15:31,320 --> 00:15:31,330
coming from the derivation attributes
 

645
00:15:31,330 --> 00:15:38,710
coming from the derivation attributes
this is the purity part so inched

646
00:15:38,710 --> 00:15:38,720
this is the purity part so inched
 

647
00:15:38,720 --> 00:15:40,870
this is the purity part so inched
instantiate takes an X file avail

648
00:15:40,870 --> 00:15:40,880
instantiate takes an X file avail
 

649
00:15:40,880 --> 00:15:43,300
instantiate takes an X file avail
evaluates it into a derivation out and

650
00:15:43,300 --> 00:15:43,310
evaluates it into a derivation out and
 

651
00:15:43,310 --> 00:15:47,010
evaluates it into a derivation out and
well the relation is basically this

652
00:15:47,010 --> 00:15:47,020
well the relation is basically this
 

653
00:15:47,020 --> 00:15:50,140
well the relation is basically this
internal representation of what mix is

654
00:15:50,140 --> 00:15:50,150
internal representation of what mix is
 

655
00:15:50,150 --> 00:15:53,250
internal representation of what mix is
gonna do

656
00:15:53,250 --> 00:15:53,260

 

657
00:15:53,260 --> 00:15:55,570

that's it's hard to show it here I also

658
00:15:55,570 --> 00:15:55,580
that's it's hard to show it here I also
 

659
00:15:55,580 --> 00:15:59,290
that's it's hard to show it here I also
show it later and and then Nick store

660
00:15:59,290 --> 00:15:59,300
show it later and and then Nick store
 

661
00:15:59,300 --> 00:16:01,810
show it later and and then Nick store
minus R is it takes this intermediate

662
00:16:01,810 --> 00:16:01,820
minus R is it takes this intermediate
 

663
00:16:01,820 --> 00:16:04,120
minus R is it takes this intermediate
representation and actually goes and

664
00:16:04,120 --> 00:16:04,130
representation and actually goes and
 

665
00:16:04,130 --> 00:16:07,600
representation and actually goes and
executes the builders so realization

666
00:16:07,600 --> 00:16:07,610
executes the builders so realization
 

667
00:16:07,610 --> 00:16:13,139
executes the builders so realization
part

668
00:16:13,139 --> 00:16:13,149

 

669
00:16:13,149 --> 00:16:16,300

yeah so you you would want you would

670
00:16:16,300 --> 00:16:16,310
yeah so you you would want you would
 

671
00:16:16,310 --> 00:16:19,199
yeah so you you would want you would
want to for example let's say you have

672
00:16:19,199 --> 00:16:19,209
want to for example let's say you have
 

673
00:16:19,209 --> 00:16:22,210
want to for example let's say you have
you know a lot of Knicks expressions you

674
00:16:22,210 --> 00:16:22,220
you know a lot of Knicks expressions you
 

675
00:16:22,220 --> 00:16:24,819
you know a lot of Knicks expressions you
want to to evaluate them and then

676
00:16:24,819 --> 00:16:24,829
want to to evaluate them and then
 

677
00:16:24,829 --> 00:16:28,059
want to to evaluate them and then
distribute the bills right so you

678
00:16:28,059 --> 00:16:28,069
distribute the bills right so you
 

679
00:16:28,069 --> 00:16:30,040
distribute the bills right so you
wouldn't be able to distribute to the

680
00:16:30,040 --> 00:16:30,050
wouldn't be able to distribute to the
 

681
00:16:30,050 --> 00:16:31,600
wouldn't be able to distribute to the
building part if it would be just one

682
00:16:31,600 --> 00:16:31,610
building part if it would be just one
 

683
00:16:31,610 --> 00:16:34,360
building part if it would be just one
one thing or at least it would be harder

684
00:16:34,360 --> 00:16:34,370
one thing or at least it would be harder
 

685
00:16:34,370 --> 00:16:44,259
one thing or at least it would be harder
to do so right because they're evasions

686
00:16:44,259 --> 00:16:44,269
to do so right because they're evasions
 

687
00:16:44,269 --> 00:16:46,240
to do so right because they're evasions
basically for a dependency tree so you

688
00:16:46,240 --> 00:16:46,250
basically for a dependency tree so you
 

689
00:16:46,250 --> 00:16:48,639
basically for a dependency tree so you
can write write an algorithm that takes

690
00:16:48,639 --> 00:16:48,649
can write write an algorithm that takes
 

691
00:16:48,649 --> 00:16:50,410
can write write an algorithm that takes
the leaves and and you know like

692
00:16:50,410 --> 00:16:50,420
the leaves and and you know like
 

693
00:16:50,420 --> 00:17:04,110
the leaves and and you know like
distributes them

694
00:17:04,110 --> 00:17:04,120

 

695
00:17:04,120 --> 00:17:06,659

good question

696
00:17:06,659 --> 00:17:06,669
good question
 

697
00:17:06,669 --> 00:17:09,490
good question
so Gabriela Gonzalez wrote this really

698
00:17:09,490 --> 00:17:09,500
so Gabriela Gonzalez wrote this really
 

699
00:17:09,500 --> 00:17:19,850
so Gabriela Gonzalez wrote this really
cool too

700
00:17:19,850 --> 00:17:19,860

 

701
00:17:19,860 --> 00:17:30,880

let's see

702
00:17:30,880 --> 00:17:30,890

 

703
00:17:30,890 --> 00:17:39,410

part of part of this darkest

704
00:17:39,410 --> 00:17:39,420

 

705
00:17:39,420 --> 00:17:41,930

he wrote a Haskell parser for it but

706
00:17:41,930 --> 00:17:41,940
he wrote a Haskell parser for it but
 

707
00:17:41,940 --> 00:17:46,190
he wrote a Haskell parser for it but
it's basically it's kind of instructions

708
00:17:46,190 --> 00:17:46,200
it's basically it's kind of instructions
 

709
00:17:46,200 --> 00:17:54,890
it's basically it's kind of instructions
right yeah yes so it's like all the

710
00:17:54,890 --> 00:17:54,900
right yeah yes so it's like all the
 

711
00:17:54,900 --> 00:17:56,510
right yeah yes so it's like all the
outputs it's going to create all the

712
00:17:56,510 --> 00:17:56,520
outputs it's going to create all the
 

713
00:17:56,520 --> 00:17:59,240
outputs it's going to create all the
inputs it needs what's the the Builder

714
00:17:59,240 --> 00:17:59,250
inputs it needs what's the the Builder
 

715
00:17:59,250 --> 00:18:01,010
inputs it needs what's the the Builder
is going to call to actually build

716
00:18:01,010 --> 00:18:01,020
is going to call to actually build
 

717
00:18:01,020 --> 00:18:03,620
is going to call to actually build
things in the sandbox or you know what

718
00:18:03,620 --> 00:18:03,630
things in the sandbox or you know what
 

719
00:18:03,630 --> 00:18:04,820
things in the sandbox or you know what
is the environment what are the

720
00:18:04,820 --> 00:18:04,830
is the environment what are the
 

721
00:18:04,830 --> 00:18:06,710
is the environment what are the
arguments to the Builder and so on

722
00:18:06,710 --> 00:18:06,720
arguments to the Builder and so on
 

723
00:18:06,720 --> 00:18:08,840
arguments to the Builder and so on
so everything NYX really needs to build

724
00:18:08,840 --> 00:18:08,850
so everything NYX really needs to build
 

725
00:18:08,850 --> 00:18:16,940
so everything NYX really needs to build
this thing in in the sandbox and this is

726
00:18:16,940 --> 00:18:16,950
this thing in in the sandbox and this is
 

727
00:18:16,950 --> 00:18:18,950
this thing in in the sandbox and this is
this is you know a hash that's this is

728
00:18:18,950 --> 00:18:18,960
this is you know a hash that's this is
 

729
00:18:18,960 --> 00:18:20,720
this is you know a hash that's this is
the hashes are actually hashes of all

730
00:18:20,720 --> 00:18:20,730
the hashes are actually hashes of all
 

731
00:18:20,730 --> 00:18:22,370
the hashes are actually hashes of all
this inputs and this this is the purity

732
00:18:22,370 --> 00:18:22,380
this inputs and this this is the purity
 

733
00:18:22,380 --> 00:18:34,880
this inputs and this this is the purity
part yes it's kind of like implicit

734
00:18:34,880 --> 00:18:34,890
part yes it's kind of like implicit
 

735
00:18:34,890 --> 00:18:36,590
part yes it's kind of like implicit
because all the inputs you gets already

736
00:18:36,590 --> 00:18:36,600
because all the inputs you gets already
 

737
00:18:36,600 --> 00:18:39,770
because all the inputs you gets already
include the hashes in string so it's

738
00:18:39,770 --> 00:18:39,780
include the hashes in string so it's
 

739
00:18:39,780 --> 00:18:47,840
include the hashes in string so it's
yeah yeah and yes and then it basically

740
00:18:47,840 --> 00:18:47,850
yeah yeah and yes and then it basically
 

741
00:18:47,850 --> 00:18:49,640
yeah yeah and yes and then it basically
knows that you know you have different

742
00:18:49,640 --> 00:18:49,650
knows that you know you have different
 

743
00:18:49,650 --> 00:18:51,980
knows that you know you have different
hashes and it goes so it forms a

744
00:18:51,980 --> 00:18:51,990
hashes and it goes so it forms a
 

745
00:18:51,990 --> 00:18:53,600
hashes and it goes so it forms a
dependency graph so that the way it

746
00:18:53,600 --> 00:18:53,610
dependency graph so that the way it
 

747
00:18:53,610 --> 00:18:55,100
dependency graph so that the way it
constructs a dependency graph is

748
00:18:55,100 --> 00:18:55,110
constructs a dependency graph is
 

749
00:18:55,110 --> 00:18:58,070
constructs a dependency graph is
basically it scans for hashes through to

750
00:18:58,070 --> 00:18:58,080
basically it scans for hashes through to
 

751
00:18:58,080 --> 00:19:00,170
basically it scans for hashes through to
the derivation files and and the same at

752
00:19:00,170 --> 00:19:00,180
the derivation files and and the same at
 

753
00:19:00,180 --> 00:19:02,270
the derivation files and and the same at
runtime I'll explain that a bit does

754
00:19:02,270 --> 00:19:02,280
runtime I'll explain that a bit does
 

755
00:19:02,280 --> 00:19:03,350
runtime I'll explain that a bit does
that answer your question

756
00:19:03,350 --> 00:19:03,360
that answer your question
 

757
00:19:03,360 --> 00:19:07,520
that answer your question
you seem to be in part ok oh maybe maybe

758
00:19:07,520 --> 00:19:07,530
you seem to be in part ok oh maybe maybe
 

759
00:19:07,530 --> 00:19:09,650
you seem to be in part ok oh maybe maybe
as we go on it becomes clearer or we can

760
00:19:09,650 --> 00:19:09,660
as we go on it becomes clearer or we can
 

761
00:19:09,660 --> 00:19:14,600
as we go on it becomes clearer or we can
go back and revisit this so yeah this is

762
00:19:14,600 --> 00:19:14,610
go back and revisit this so yeah this is
 

763
00:19:14,610 --> 00:19:21,080
go back and revisit this so yeah this is
not the best way but sorry and then ok

764
00:19:21,080 --> 00:19:21,090
not the best way but sorry and then ok
 

765
00:19:21,090 --> 00:19:22,780
not the best way but sorry and then ok
and then then comes this you know very

766
00:19:22,780 --> 00:19:22,790
and then then comes this you know very
 

767
00:19:22,790 --> 00:19:24,830
and then then comes this you know very
common problem in packets in the

768
00:19:24,830 --> 00:19:24,840
common problem in packets in the
 

769
00:19:24,840 --> 00:19:28,580
common problem in packets in the
bootstrapping right now okay in in in

770
00:19:28,580 --> 00:19:28,590
bootstrapping right now okay in in in
 

771
00:19:28,590 --> 00:19:31,670
bootstrapping right now okay in in in
this case we took the compiled you know

772
00:19:31,670 --> 00:19:31,680
this case we took the compiled you know
 

773
00:19:31,680 --> 00:19:34,190
this case we took the compiled you know
file as our builder and that was our

774
00:19:34,190 --> 00:19:34,200
file as our builder and that was our
 

775
00:19:34,200 --> 00:19:36,230
file as our builder and that was our
input which was you know pure as we

776
00:19:36,230 --> 00:19:36,240
input which was you know pure as we
 

777
00:19:36,240 --> 00:19:38,840
input which was you know pure as we
always get the same builder otherwise

778
00:19:38,840 --> 00:19:38,850
always get the same builder otherwise
 

779
00:19:38,850 --> 00:19:40,910
always get the same builder otherwise
the hash would change if the contents of

780
00:19:40,910 --> 00:19:40,920
the hash would change if the contents of
 

781
00:19:40,920 --> 00:19:42,920
the hash would change if the contents of
the touch file would change but now we

782
00:19:42,920 --> 00:19:42,930
the touch file would change but now we
 

783
00:19:42,930 --> 00:19:45,380
the touch file would change but now we
want for example to compile it from

784
00:19:45,380 --> 00:19:45,390
want for example to compile it from
 

785
00:19:45,390 --> 00:19:47,930
want for example to compile it from
source right and then you get into this

786
00:19:47,930 --> 00:19:47,940
source right and then you get into this
 

787
00:19:47,940 --> 00:19:50,150
source right and then you get into this
bootstrapping problem of like where do

788
00:19:50,150 --> 00:19:50,160
bootstrapping problem of like where do
 

789
00:19:50,160 --> 00:19:51,140
bootstrapping problem of like where do
you get gg8

790
00:19:51,140 --> 00:19:51,150
you get gg8
 

791
00:19:51,150 --> 00:19:53,000
you get gg8
know GCC from

792
00:19:53,000 --> 00:19:53,010
know GCC from
 

793
00:19:53,010 --> 00:19:55,850
know GCC from
so you have to start somewhere in

794
00:19:55,850 --> 00:19:55,860
so you have to start somewhere in
 

795
00:19:55,860 --> 00:19:59,030
so you have to start somewhere in
bootstrap and this is where Nix packages

796
00:19:59,030 --> 00:19:59,040
bootstrap and this is where Nix packages
 

797
00:19:59,040 --> 00:20:01,010
bootstrap and this is where Nix packages
come from you have we have something

798
00:20:01,010 --> 00:20:01,020
come from you have we have something
 

799
00:20:01,020 --> 00:20:02,990
come from you have we have something
like standard environment which is like

800
00:20:02,990 --> 00:20:03,000
like standard environment which is like
 

801
00:20:03,000 --> 00:20:06,230
like standard environment which is like
the baseline so we we take binaries of

802
00:20:06,230 --> 00:20:06,240
the baseline so we we take binaries of
 

803
00:20:06,240 --> 00:20:09,020
the baseline so we we take binaries of
GCC and so on and bootstrap the the

804
00:20:09,020 --> 00:20:09,030
GCC and so on and bootstrap the the
 

805
00:20:09,030 --> 00:20:11,630
GCC and so on and bootstrap the the
basic derivation with the binaries we

806
00:20:11,630 --> 00:20:11,640
basic derivation with the binaries we
 

807
00:20:11,640 --> 00:20:14,480
basic derivation with the binaries we
compile that again to from source and

808
00:20:14,480 --> 00:20:14,490
compile that again to from source and
 

809
00:20:14,490 --> 00:20:16,550
compile that again to from source and
then you get standing environment which

810
00:20:16,550 --> 00:20:16,560
then you get standing environment which
 

811
00:20:16,560 --> 00:20:19,580
then you get standing environment which
includes that the batch builder and GCC

812
00:20:19,580 --> 00:20:19,590
includes that the batch builder and GCC
 

813
00:20:19,590 --> 00:20:22,070
includes that the batch builder and GCC
and kuru teals and or all of the the

814
00:20:22,070 --> 00:20:22,080
and kuru teals and or all of the the
 

815
00:20:22,080 --> 00:20:23,990
and kuru teals and or all of the the
standard tools and and the make the make

816
00:20:23,990 --> 00:20:24,000
standard tools and and the make the make
 

817
00:20:24,000 --> 00:20:27,140
standard tools and and the make the make
file is there and and so on so quite a

818
00:20:27,140 --> 00:20:27,150
file is there and and so on so quite a
 

819
00:20:27,150 --> 00:20:28,880
file is there and and so on so quite a
lot of things that you get out of out of

820
00:20:28,880 --> 00:20:28,890
lot of things that you get out of out of
 

821
00:20:28,890 --> 00:20:32,660
lot of things that you get out of out of
the box so and and then this is more

822
00:20:32,660 --> 00:20:32,670
the box so and and then this is more
 

823
00:20:32,670 --> 00:20:34,520
the box so and and then this is more
like something you would really use for

824
00:20:34,520 --> 00:20:34,530
like something you would really use for
 

825
00:20:34,530 --> 00:20:37,820
like something you would really use for
minx packages okay I'm here it becomes

826
00:20:37,820 --> 00:20:37,830
minx packages okay I'm here it becomes
 

827
00:20:37,830 --> 00:20:40,870
minx packages okay I'm here it becomes
tricky this is like the the typical

828
00:20:40,870 --> 00:20:40,880
tricky this is like the the typical
 

829
00:20:40,880 --> 00:20:43,760
tricky this is like the the typical
pattern or however you want to call it

830
00:20:43,760 --> 00:20:43,770
pattern or however you want to call it
 

831
00:20:43,770 --> 00:20:46,280
pattern or however you want to call it
where we importing expected jizz and

832
00:20:46,280 --> 00:20:46,290
where we importing expected jizz and
 

833
00:20:46,290 --> 00:20:49,130
where we importing expected jizz and
then we we put it into our namespace so

834
00:20:49,130 --> 00:20:49,140
then we we put it into our namespace so
 

835
00:20:49,140 --> 00:20:51,380
then we we put it into our namespace so
we don't have to say packages that stand

836
00:20:51,380 --> 00:20:51,390
we don't have to say packages that stand
 

837
00:20:51,390 --> 00:20:53,480
we don't have to say packages that stand
in environment blah blah blah and this

838
00:20:53,480 --> 00:20:53,490
in environment blah blah blah and this
 

839
00:20:53,490 --> 00:20:55,760
in environment blah blah blah and this
this is the part this is the function

840
00:20:55,760 --> 00:20:55,770
this is the part this is the function
 

841
00:20:55,770 --> 00:20:59,440
this is the part this is the function
that calls the primitive derivation and

842
00:20:59,440 --> 00:20:59,450
that calls the primitive derivation and
 

843
00:20:59,450 --> 00:21:02,180
that calls the primitive derivation and
and you know NYX itself doesn't come

844
00:21:02,180 --> 00:21:02,190
and you know NYX itself doesn't come
 

845
00:21:02,190 --> 00:21:04,070
and you know NYX itself doesn't come
with any packages so it's very you know

846
00:21:04,070 --> 00:21:04,080
with any packages so it's very you know
 

847
00:21:04,080 --> 00:21:05,810
with any packages so it's very you know
it's meant to be a general purpose thing

848
00:21:05,810 --> 00:21:05,820
it's meant to be a general purpose thing
 

849
00:21:05,820 --> 00:21:07,910
it's meant to be a general purpose thing
but to do anything useful you need to

850
00:21:07,910 --> 00:21:07,920
but to do anything useful you need to
 

851
00:21:07,920 --> 00:21:11,290
but to do anything useful you need to
have this environment to build things in

852
00:21:11,290 --> 00:21:11,300
have this environment to build things in
 

853
00:21:11,300 --> 00:21:14,690
have this environment to build things in
this is this is yeah we would need a bit

854
00:21:14,690 --> 00:21:14,700
this is this is yeah we would need a bit
 

855
00:21:14,700 --> 00:21:16,430
this is this is yeah we would need a bit
of time to go through all of this I'm

856
00:21:16,430 --> 00:21:16,440
of time to go through all of this I'm
 

857
00:21:16,440 --> 00:21:19,030
of time to go through all of this I'm
sorry for being a bit vague on this one

858
00:21:19,030 --> 00:21:19,040
sorry for being a bit vague on this one
 

859
00:21:19,040 --> 00:21:22,820
sorry for being a bit vague on this one
and and then the make derivation kind of

860
00:21:22,820 --> 00:21:22,830
and and then the make derivation kind of
 

861
00:21:22,830 --> 00:21:24,590
and and then the make derivation kind of
is is except these more high-level

862
00:21:24,590 --> 00:21:24,600
is is except these more high-level
 

863
00:21:24,600 --> 00:21:26,660
is is except these more high-level
attributes like you can tell it where

864
00:21:26,660 --> 00:21:26,670
attributes like you can tell it where
 

865
00:21:26,670 --> 00:21:29,000
attributes like you can tell it where
the sources and you can tell it build

866
00:21:29,000 --> 00:21:29,010
the sources and you can tell it build
 

867
00:21:29,010 --> 00:21:30,560
the sources and you can tell it build
phases and the way this works is

868
00:21:30,560 --> 00:21:30,570
phases and the way this works is
 

869
00:21:30,570 --> 00:21:33,050
phases and the way this works is
actually it's a long bash file that

870
00:21:33,050 --> 00:21:33,060
actually it's a long bash file that
 

871
00:21:33,060 --> 00:21:35,690
actually it's a long bash file that
basically executes - functions and these

872
00:21:35,690 --> 00:21:35,700
basically executes - functions and these
 

873
00:21:35,700 --> 00:21:37,460
basically executes - functions and these
build phases are basically bash

874
00:21:37,460 --> 00:21:37,470
build phases are basically bash
 

875
00:21:37,470 --> 00:21:40,580
build phases are basically bash
functions that are then like inline into

876
00:21:40,580 --> 00:21:40,590
functions that are then like inline into
 

877
00:21:40,590 --> 00:21:44,450
functions that are then like inline into
this hole builder bash process of course

878
00:21:44,450 --> 00:21:44,460
this hole builder bash process of course
 

879
00:21:44,460 --> 00:21:46,550
this hole builder bash process of course
nobody stops you you could basically use

880
00:21:46,550 --> 00:21:46,560
nobody stops you you could basically use
 

881
00:21:46,560 --> 00:21:49,010
nobody stops you you could basically use
Haskell as a builder and you could like

882
00:21:49,010 --> 00:21:49,020
Haskell as a builder and you could like
 

883
00:21:49,020 --> 00:21:50,990
Haskell as a builder and you could like
pass it in and and all of these

884
00:21:50,990 --> 00:21:51,000
pass it in and and all of these
 

885
00:21:51,000 --> 00:21:53,030
pass it in and and all of these
attributes are passed in as an arguments

886
00:21:53,030 --> 00:21:53,040
attributes are passed in as an arguments
 

887
00:21:53,040 --> 00:21:54,590
attributes are passed in as an arguments
to the Builder basically on the common

888
00:21:54,590 --> 00:21:54,600
to the Builder basically on the common
 

889
00:21:54,600 --> 00:21:57,620
to the Builder basically on the common
line so nothing stops you from for

890
00:21:57,620 --> 00:21:57,630
line so nothing stops you from for
 

891
00:21:57,630 --> 00:21:58,490
line so nothing stops you from for
grading

892
00:21:58,490 --> 00:21:58,500
grading
 

893
00:21:58,500 --> 00:22:01,270
grading
Haskell builder if you want to go so far

894
00:22:01,270 --> 00:22:01,280
Haskell builder if you want to go so far
 

895
00:22:01,280 --> 00:22:05,000
Haskell builder if you want to go so far
there is actually a GU weeks which is

896
00:22:05,000 --> 00:22:05,010
there is actually a GU weeks which is
 

897
00:22:05,010 --> 00:22:05,919
there is actually a GU weeks which is
kind of like

898
00:22:05,919 --> 00:22:05,929
kind of like
 

899
00:22:05,929 --> 00:22:10,379
kind of like
I would say competitor but a friendly

900
00:22:10,379 --> 00:22:10,389
I would say competitor but a friendly
 

901
00:22:10,389 --> 00:22:14,799
I would say competitor but a friendly
experiment which reduces Kyle to go all

902
00:22:14,799 --> 00:22:14,809
experiment which reduces Kyle to go all
 

903
00:22:14,809 --> 00:22:18,310
experiment which reduces Kyle to go all
the way down so it uses guile as a you

904
00:22:18,310 --> 00:22:18,320
the way down so it uses guile as a you
 

905
00:22:18,320 --> 00:22:21,419
the way down so it uses guile as a you
know the language for describing the

906
00:22:21,419 --> 00:22:21,429
know the language for describing the
 

907
00:22:21,429 --> 00:22:23,769
know the language for describing the
derivations but also the Builder is

908
00:22:23,769 --> 00:22:23,779
derivations but also the Builder is
 

909
00:22:23,779 --> 00:22:26,109
derivations but also the Builder is
written in God so you have the same like

910
00:22:26,109 --> 00:22:26,119
written in God so you have the same like
 

911
00:22:26,119 --> 00:22:32,289
written in God so you have the same like
language all the way down so that's yeah

912
00:22:32,289 --> 00:22:32,299
language all the way down so that's yeah
 

913
00:22:32,299 --> 00:22:35,379
language all the way down so that's yeah
we were here Nick goes the pragmatic

914
00:22:35,379 --> 00:22:35,389
we were here Nick goes the pragmatic
 

915
00:22:35,389 --> 00:22:37,720
we were here Nick goes the pragmatic
approach and and God and and Greeks goes

916
00:22:37,720 --> 00:22:37,730
approach and and God and and Greeks goes
 

917
00:22:37,730 --> 00:22:41,889
approach and and God and and Greeks goes
a bit more extreme and yeah and here we

918
00:22:41,889 --> 00:22:41,899
a bit more extreme and yeah and here we
 

919
00:22:41,899 --> 00:22:44,080
a bit more extreme and yeah and here we
do make derivation you already get GCC

920
00:22:44,080 --> 00:22:44,090
do make derivation you already get GCC
 

921
00:22:44,090 --> 00:22:55,690
do make derivation you already get GCC
and so on so you would be able to guess

922
00:22:55,690 --> 00:22:55,700
and so on so you would be able to guess
 

923
00:22:55,700 --> 00:22:57,609
and so on so you would be able to guess
so every time you would you would change

924
00:22:57,609 --> 00:22:57,619
so every time you would you would change
 

925
00:22:57,619 --> 00:23:00,190
so every time you would you would change
that see basically this source here

926
00:23:00,190 --> 00:23:00,200
that see basically this source here
 

927
00:23:00,200 --> 00:23:02,499
that see basically this source here
would you know this the con the content

928
00:23:02,499 --> 00:23:02,509
would you know this the con the content
 

929
00:23:02,509 --> 00:23:04,029
would you know this the con the content
of this source would change so to hold

930
00:23:04,029 --> 00:23:04,039
of this source would change so to hold
 

931
00:23:04,039 --> 00:23:05,320
of this source would change so to hold
the hash would change because of that

932
00:23:05,320 --> 00:23:05,330
the hash would change because of that
 

933
00:23:05,330 --> 00:23:12,129
the hash would change because of that
basically yeah that yeah so all the

934
00:23:12,129 --> 00:23:12,139
basically yeah that yeah so all the
 

935
00:23:12,139 --> 00:23:14,049
basically yeah that yeah so all the
inputs right in this case source is is

936
00:23:14,049 --> 00:23:14,059
inputs right in this case source is is
 

937
00:23:14,059 --> 00:23:22,749
inputs right in this case source is is
the whole yes yeah so like for local

938
00:23:22,749 --> 00:23:22,759
the whole yes yeah so like for local
 

939
00:23:22,759 --> 00:23:24,730
the whole yes yeah so like for local
development if you have local things

940
00:23:24,730 --> 00:23:24,740
development if you have local things
 

941
00:23:24,740 --> 00:23:28,600
development if you have local things
like you know like an editor on an

942
00:23:28,600 --> 00:23:28,610
like you know like an editor on an
 

943
00:23:28,610 --> 00:23:30,609
like you know like an editor on an
editor config or so on you have to

944
00:23:30,609 --> 00:23:30,619
editor config or so on you have to
 

945
00:23:30,619 --> 00:23:32,619
editor config or so on you have to
filter that out other words becomes part

946
00:23:32,619 --> 00:23:32,629
filter that out other words becomes part
 

947
00:23:32,629 --> 00:23:40,509
filter that out other words becomes part
of the hash I hope I hope that's a it's

948
00:23:40,509 --> 00:23:40,519
of the hash I hope I hope that's a it's
 

949
00:23:40,519 --> 00:23:42,909
of the hash I hope I hope that's a it's
a lot to cover so I cannot you know we

950
00:23:42,909 --> 00:23:42,919
a lot to cover so I cannot you know we
 

951
00:23:42,919 --> 00:23:45,639
a lot to cover so I cannot you know we
would need a couple of days to really go

952
00:23:45,639 --> 00:23:45,649
would need a couple of days to really go
 

953
00:23:45,649 --> 00:23:47,320
would need a couple of days to really go
through all the details and there is the

954
00:23:47,320 --> 00:23:47,330
through all the details and there is the
 

955
00:23:47,330 --> 00:23:50,200
through all the details and there is the
there there is these are con you know

956
00:23:50,200 --> 00:23:50,210
there there is these are con you know
 

957
00:23:50,210 --> 00:23:52,570
there there is these are con you know
contents and reservations but there is

958
00:23:52,570 --> 00:23:52,580
contents and reservations but there is
 

959
00:23:52,580 --> 00:23:54,940
contents and reservations but there is
also a fixed output duration which

960
00:23:54,940 --> 00:23:54,950
also a fixed output duration which
 

961
00:23:54,950 --> 00:23:56,649
also a fixed output duration which
basically means instead of calculating

962
00:23:56,649 --> 00:23:56,659
basically means instead of calculating
 

963
00:23:56,659 --> 00:23:59,590
basically means instead of calculating
the hash we give the hash to the

964
00:23:59,590 --> 00:23:59,600
the hash we give the hash to the
 

965
00:23:59,600 --> 00:24:01,389
the hash we give the hash to the
derivation and then you can allow

966
00:24:01,389 --> 00:24:01,399
derivation and then you can allow
 

967
00:24:01,399 --> 00:24:03,399
derivation and then you can allow
network access because anything you get

968
00:24:03,399 --> 00:24:03,409
network access because anything you get
 

969
00:24:03,409 --> 00:24:06,460
network access because anything you get
can be hashed at the end right so this

970
00:24:06,460 --> 00:24:06,470
can be hashed at the end right so this
 

971
00:24:06,470 --> 00:24:08,560
can be hashed at the end right so this
is how you this is how you do networking

972
00:24:08,560 --> 00:24:08,570
is how you this is how you do networking
 

973
00:24:08,570 --> 00:24:11,150
is how you this is how you do networking
then

974
00:24:11,150 --> 00:24:11,160

 

975
00:24:11,160 --> 00:24:14,510

and again we have a determinism by by

976
00:24:14,510 --> 00:24:14,520
and again we have a determinism by by
 

977
00:24:14,520 --> 00:24:16,790
and again we have a determinism by by
this hatch that we provide and the

978
00:24:16,790 --> 00:24:16,800
this hatch that we provide and the
 

979
00:24:16,800 --> 00:24:19,010
this hatch that we provide and the
factory would use you know curl in in

980
00:24:19,010 --> 00:24:19,020
factory would use you know curl in in
 

981
00:24:19,020 --> 00:24:20,240
factory would use you know curl in in
the background in the derivation

982
00:24:20,240 --> 00:24:20,250
the background in the derivation
 

983
00:24:20,250 --> 00:24:22,550
the background in the derivation
download it and then assert the whole

984
00:24:22,550 --> 00:24:22,560
download it and then assert the whole
 

985
00:24:22,560 --> 00:24:31,970
download it and then assert the whole
the whole output has this this hash yeah

986
00:24:31,970 --> 00:24:31,980
the whole output has this this hash yeah
 

987
00:24:31,980 --> 00:24:34,430
the whole output has this this hash yeah
that's that's our you know that's our IO

988
00:24:34,430 --> 00:24:34,440
that's that's our you know that's our IO
 

989
00:24:34,440 --> 00:24:36,020
that's that's our you know that's our IO
basically it's based on the fact that

990
00:24:36,020 --> 00:24:36,030
basically it's based on the fact that
 

991
00:24:36,030 --> 00:24:50,600
basically it's based on the fact that
you you you assert yes so so what what

992
00:24:50,600 --> 00:24:50,610
you you you assert yes so so what what
 

993
00:24:50,610 --> 00:24:52,880
you you you assert yes so so what what
this allows us to do really this this

994
00:24:52,880 --> 00:24:52,890
this allows us to do really this this
 

995
00:24:52,890 --> 00:24:55,610
this allows us to do really this this
hatch hashing is that I think for the

996
00:24:55,610 --> 00:24:55,620
hatch hashing is that I think for the
 

997
00:24:55,620 --> 00:24:59,030
hatch hashing is that I think for the
very first time we have a lacking system

998
00:24:59,030 --> 00:24:59,040
very first time we have a lacking system
 

999
00:24:59,040 --> 00:25:02,360
very first time we have a lacking system
that is source and binary right this

1000
00:25:02,360 --> 00:25:02,370
that is source and binary right this
 

1001
00:25:02,370 --> 00:25:05,570
that is source and binary right this
hashes uniquely identify how our

1002
00:25:05,570 --> 00:25:05,580
hashes uniquely identify how our
 

1003
00:25:05,580 --> 00:25:08,180
hashes uniquely identify how our
packages were built so we can basically

1004
00:25:08,180 --> 00:25:08,190
packages were built so we can basically
 

1005
00:25:08,190 --> 00:25:12,740
packages were built so we can basically
ash ask a service Oh with this hash can

1006
00:25:12,740 --> 00:25:12,750
ash ask a service Oh with this hash can
 

1007
00:25:12,750 --> 00:25:14,570
ash ask a service Oh with this hash can
you give me the binary package if not

1008
00:25:14,570 --> 00:25:14,580
you give me the binary package if not
 

1009
00:25:14,580 --> 00:25:17,390
you give me the binary package if not
I'll build it from source so mixes is

1010
00:25:17,390 --> 00:25:17,400
I'll build it from source so mixes is
 

1011
00:25:17,400 --> 00:25:20,630
I'll build it from source so mixes is
transparently its its source and binary

1012
00:25:20,630 --> 00:25:20,640
transparently its its source and binary
 

1013
00:25:20,640 --> 00:25:23,120
transparently its its source and binary
at the same time right and we use this

1014
00:25:23,120 --> 00:25:23,130
at the same time right and we use this
 

1015
00:25:23,130 --> 00:25:25,280
at the same time right and we use this
binary we call this binary substitution

1016
00:25:25,280 --> 00:25:25,290
binary we call this binary substitution
 

1017
00:25:25,290 --> 00:25:28,250
binary we call this binary substitution
which you can use SSH or HTTP or

1018
00:25:28,250 --> 00:25:28,260
which you can use SSH or HTTP or
 

1019
00:25:28,260 --> 00:25:29,900
which you can use SSH or HTTP or
something like that to ask for the hash

1020
00:25:29,900 --> 00:25:29,910
something like that to ask for the hash
 

1021
00:25:29,910 --> 00:25:32,630
something like that to ask for the hash
or you build it from source and and this

1022
00:25:32,630 --> 00:25:32,640
or you build it from source and and this
 

1023
00:25:32,640 --> 00:25:34,280
or you build it from source and and this
is what we do in our GK as well we have

1024
00:25:34,280 --> 00:25:34,290
is what we do in our GK as well we have
 

1025
00:25:34,290 --> 00:25:36,530
is what we do in our GK as well we have
the binary cash so actually you can get

1026
00:25:36,530 --> 00:25:36,540
the binary cash so actually you can get
 

1027
00:25:36,540 --> 00:25:38,840
the binary cash so actually you can get
you know a thirty megabyte compiled

1028
00:25:38,840 --> 00:25:38,850
you know a thirty megabyte compiled
 

1029
00:25:38,850 --> 00:25:42,140
you know a thirty megabyte compiled
Haskell binary for most of our commits

1030
00:25:42,140 --> 00:25:42,150
Haskell binary for most of our commits
 

1031
00:25:42,150 --> 00:25:49,490
Haskell binary for most of our commits
that that are in the github and and I

1032
00:25:49,490 --> 00:25:49,500
that that are in the github and and I
 

1033
00:25:49,500 --> 00:25:51,890
that that are in the github and and I
think one of the one of the you know

1034
00:25:51,890 --> 00:25:51,900
think one of the one of the you know
 

1035
00:25:51,900 --> 00:25:54,860
think one of the one of the you know
major you know things that makes really

1036
00:25:54,860 --> 00:25:54,870
major you know things that makes really
 

1037
00:25:54,870 --> 00:25:57,470
major you know things that makes really
you know invented or discovered to be

1038
00:25:57,470 --> 00:25:57,480
you know invented or discovered to be
 

1039
00:25:57,480 --> 00:25:59,990
you know invented or discovered to be
precise is that we have this path a

1040
00:25:59,990 --> 00:26:00,000
precise is that we have this path a
 

1041
00:26:00,000 --> 00:26:02,420
precise is that we have this path a
location like memory management you know

1042
00:26:02,420 --> 00:26:02,430
location like memory management you know
 

1043
00:26:02,430 --> 00:26:04,160
location like memory management you know
when we went to high level languages and

1044
00:26:04,160 --> 00:26:04,170
when we went to high level languages and
 

1045
00:26:04,170 --> 00:26:05,870
when we went to high level languages and
you can say give me some memory and all

1046
00:26:05,870 --> 00:26:05,880
you can say give me some memory and all
 

1047
00:26:05,880 --> 00:26:07,790
you can say give me some memory and all
this stuff this is what does with

1048
00:26:07,790 --> 00:26:07,800
this stuff this is what does with
 

1049
00:26:07,800 --> 00:26:10,940
this stuff this is what does with
pass right you say you know give me a

1050
00:26:10,940 --> 00:26:10,950
pass right you say you know give me a
 

1051
00:26:10,950 --> 00:26:13,640
pass right you say you know give me a
path with with food a tags name and and

1052
00:26:13,640 --> 00:26:13,650
path with with food a tags name and and
 

1053
00:26:13,650 --> 00:26:15,530
path with with food a tags name and and
with the contents bar and you know you

1054
00:26:15,530 --> 00:26:15,540
with the contents bar and you know you
 

1055
00:26:15,540 --> 00:26:19,070
with the contents bar and you know you
have it and then you can nest that and

1056
00:26:19,070 --> 00:26:19,080
have it and then you can nest that and
 

1057
00:26:19,080 --> 00:26:21,890
have it and then you can nest that and
it builds the dependency tree so this is

1058
00:26:21,890 --> 00:26:21,900
it builds the dependency tree so this is
 

1059
00:26:21,900 --> 00:26:23,810
it builds the dependency tree so this is
how it's you know collects what belongs

1060
00:26:23,810 --> 00:26:23,820
how it's you know collects what belongs
 

1061
00:26:23,820 --> 00:26:24,799
how it's you know collects what belongs
together

1062
00:26:24,799 --> 00:26:24,809
together
 

1063
00:26:24,809 --> 00:26:27,110
together
and so there are two garbage collectors

1064
00:26:27,110 --> 00:26:27,120
and so there are two garbage collectors
 

1065
00:26:27,120 --> 00:26:30,590
and so there are two garbage collectors
one is on the language itself you know

1066
00:26:30,590 --> 00:26:30,600
one is on the language itself you know
 

1067
00:26:30,600 --> 00:26:33,350
one is on the language itself you know
if things go you know we things are not

1068
00:26:33,350 --> 00:26:33,360
if things go you know we things are not
 

1069
00:26:33,360 --> 00:26:35,480
if things go you know we things are not
references it's it's garbage collects

1070
00:26:35,480 --> 00:26:35,490
references it's it's garbage collects
 

1071
00:26:35,490 --> 00:26:37,129
references it's it's garbage collects
them but there is the the second garbage

1072
00:26:37,129 --> 00:26:37,139
them but there is the the second garbage
 

1073
00:26:37,139 --> 00:26:40,399
them but there is the the second garbage
collector that actually as we as we

1074
00:26:40,399 --> 00:26:40,409
collector that actually as we as we
 

1075
00:26:40,409 --> 00:26:42,350
collector that actually as we as we
allocate these pads right there needs to

1076
00:26:42,350 --> 00:26:42,360
allocate these pads right there needs to
 

1077
00:26:42,360 --> 00:26:44,570
allocate these pads right there needs to
be some way of saying how do you clean

1078
00:26:44,570 --> 00:26:44,580
be some way of saying how do you clean
 

1079
00:26:44,580 --> 00:26:47,629
be some way of saying how do you clean
them up because it's it's it's immutable

1080
00:26:47,629 --> 00:26:47,639
them up because it's it's it's immutable
 

1081
00:26:47,639 --> 00:26:49,639
them up because it's it's it's immutable
it just creates them and then nothing

1082
00:26:49,639 --> 00:26:49,649
it just creates them and then nothing
 

1083
00:26:49,649 --> 00:26:52,310
it just creates them and then nothing
really you know deletes them and there's

1084
00:26:52,310 --> 00:26:52,320
really you know deletes them and there's
 

1085
00:26:52,320 --> 00:26:54,919
really you know deletes them and there's
the the carbage collection part which i

1086
00:26:54,919 --> 00:26:54,929
the the carbage collection part which i
 

1087
00:26:54,929 --> 00:26:57,109
the the carbage collection part which i
don't really talk much about in this

1088
00:26:57,109 --> 00:26:57,119
don't really talk much about in this
 

1089
00:26:57,119 --> 00:26:59,629
don't really talk much about in this
workshop but essentially what you do is

1090
00:26:59,629 --> 00:26:59,639
workshop but essentially what you do is
 

1091
00:26:59,639 --> 00:27:02,090
workshop but essentially what you do is
is you define a strategy how do you want

1092
00:27:02,090 --> 00:27:02,100
is you define a strategy how do you want
 

1093
00:27:02,100 --> 00:27:04,269
is you define a strategy how do you want
to collect things you can say like i

1094
00:27:04,269 --> 00:27:04,279
to collect things you can say like i
 

1095
00:27:04,279 --> 00:27:07,820
to collect things you can say like i
want to have ten gigabytes off of my

1096
00:27:07,820 --> 00:27:07,830
want to have ten gigabytes off of my
 

1097
00:27:07,830 --> 00:27:10,399
want to have ten gigabytes off of my
disks free and everything palaces is you

1098
00:27:10,399 --> 00:27:10,409
disks free and everything palaces is you
 

1099
00:27:10,409 --> 00:27:16,310
disks free and everything palaces is you
know should stay there and and it has

1100
00:27:16,310 --> 00:27:16,320
know should stay there and and it has
 

1101
00:27:16,320 --> 00:27:18,560
know should stay there and and it has
this concept of GC roots of where you

1102
00:27:18,560 --> 00:27:18,570
this concept of GC roots of where you
 

1103
00:27:18,570 --> 00:27:22,489
this concept of GC roots of where you
define you know you link the buildning

1104
00:27:22,489 --> 00:27:22,499
define you know you link the buildning
 

1105
00:27:22,499 --> 00:27:25,190
define you know you link the buildning
sneaks expression into a GC root and

1106
00:27:25,190 --> 00:27:25,200
sneaks expression into a GC root and
 

1107
00:27:25,200 --> 00:27:27,200
sneaks expression into a GC root and
that means it won't garbage collected

1108
00:27:27,200 --> 00:27:27,210
that means it won't garbage collected
 

1109
00:27:27,210 --> 00:27:32,539
that means it won't garbage collected
and it's it's it's better to read that

1110
00:27:32,539 --> 00:27:32,549
and it's it's it's better to read that
 

1111
00:27:32,549 --> 00:27:35,570
and it's it's it's better to read that
Labatt's it's pretty it's not important

1112
00:27:35,570 --> 00:27:35,580
Labatt's it's pretty it's not important
 

1113
00:27:35,580 --> 00:27:37,399
Labatt's it's pretty it's not important
really we have a terabyte disk so

1114
00:27:37,399 --> 00:27:37,409
really we have a terabyte disk so
 

1115
00:27:37,409 --> 00:27:42,139
really we have a terabyte disk so
whatever

1116
00:27:42,139 --> 00:27:42,149

 

1117
00:27:42,149 --> 00:27:45,169

yeah then then there's this concept of

1118
00:27:45,169 --> 00:27:45,179
yeah then then there's this concept of
 

1119
00:27:45,179 --> 00:27:47,719
yeah then then there's this concept of
entering this environment in which the

1120
00:27:47,719 --> 00:27:47,729
entering this environment in which the
 

1121
00:27:47,729 --> 00:27:50,119
entering this environment in which the
Builder will be built the derivation and

1122
00:27:50,119 --> 00:27:50,129
Builder will be built the derivation and
 

1123
00:27:50,129 --> 00:27:52,369
Builder will be built the derivation and
this is where where Nick shell comes in

1124
00:27:52,369 --> 00:27:52,379
this is where where Nick shell comes in
 

1125
00:27:52,379 --> 00:27:55,039
this is where where Nick shell comes in
this is the development tool right so if

1126
00:27:55,039 --> 00:27:55,049
this is the development tool right so if
 

1127
00:27:55,049 --> 00:27:59,659
this is the development tool right so if
I say if I if I have a default Nick's

1128
00:27:59,659 --> 00:27:59,669
I say if I if I have a default Nick's
 

1129
00:27:59,669 --> 00:28:01,489
I say if I if I have a default Nick's
file which is like the convention of

1130
00:28:01,489 --> 00:28:01,499
file which is like the convention of
 

1131
00:28:01,499 --> 00:28:05,289
file which is like the convention of
what it will use and I say you know

1132
00:28:05,289 --> 00:28:05,299
what it will use and I say you know
 

1133
00:28:05,299 --> 00:28:08,239
what it will use and I say you know
entered a hello attribute and this is a

1134
00:28:08,239 --> 00:28:08,249
entered a hello attribute and this is a
 

1135
00:28:08,249 --> 00:28:11,119
entered a hello attribute and this is a
derivation in that file then instead of

1136
00:28:11,119 --> 00:28:11,129
derivation in that file then instead of
 

1137
00:28:11,129 --> 00:28:15,799
derivation in that file then instead of
you know actually taking the the input

1138
00:28:15,799 --> 00:28:15,809
you know actually taking the the input
 

1139
00:28:15,809 --> 00:28:18,279
you know actually taking the the input
and and X you know building the

1140
00:28:18,279 --> 00:28:18,289
and and X you know building the
 

1141
00:28:18,289 --> 00:28:21,079
and and X you know building the
derivation in the Builder it will just

1142
00:28:21,079 --> 00:28:21,089
derivation in the Builder it will just
 

1143
00:28:21,089 --> 00:28:24,439
derivation in the Builder it will just
take the inputs and enter a shell with

1144
00:28:24,439 --> 00:28:24,449
take the inputs and enter a shell with
 

1145
00:28:24,449 --> 00:28:27,619
take the inputs and enter a shell with
all of those inputs present and because

1146
00:28:27,619 --> 00:28:27,629
all of those inputs present and because
 

1147
00:28:27,629 --> 00:28:29,779
all of those inputs present and because
our if our builder is bash of course if

1148
00:28:29,779 --> 00:28:29,789
our if our builder is bash of course if
 

1149
00:28:29,789 --> 00:28:32,029
our if our builder is bash of course if
you would take Haskell then you would

1150
00:28:32,029 --> 00:28:32,039
you would take Haskell then you would
 

1151
00:28:32,039 --> 00:28:33,889
you would take Haskell then you would
have to implement kind of your own shell

1152
00:28:33,889 --> 00:28:33,899
have to implement kind of your own shell
 

1153
00:28:33,899 --> 00:28:35,869
have to implement kind of your own shell
I guess this then it would huge you know

1154
00:28:35,869 --> 00:28:35,879
I guess this then it would huge you know
 

1155
00:28:35,879 --> 00:28:41,089
I guess this then it would huge you know
the g8 CI as a shell but in this case

1156
00:28:41,089 --> 00:28:41,099
the g8 CI as a shell but in this case
 

1157
00:28:41,099 --> 00:28:43,459
the g8 CI as a shell but in this case
you you get into a bash environment all

1158
00:28:43,459 --> 00:28:43,469
you you get into a bash environment all
 

1159
00:28:43,469 --> 00:28:45,709
you you get into a bash environment all
the inputs that would be used to build

1160
00:28:45,709 --> 00:28:45,719
the inputs that would be used to build
 

1161
00:28:45,719 --> 00:28:47,959
the inputs that would be used to build
the hello package and by default that

1162
00:28:47,959 --> 00:28:47,969
the hello package and by default that
 

1163
00:28:47,969 --> 00:28:50,059
the hello package and by default that
inherits your environment so it's

1164
00:28:50,059 --> 00:28:50,069
inherits your environment so it's
 

1165
00:28:50,069 --> 00:28:51,919
inherits your environment so it's
convenient for people if they have

1166
00:28:51,919 --> 00:28:51,929
convenient for people if they have
 

1167
00:28:51,929 --> 00:28:53,929
convenient for people if they have
editors and so on that you know they're

1168
00:28:53,929 --> 00:28:53,939
editors and so on that you know they're
 

1169
00:28:53,939 --> 00:28:56,299
editors and so on that you know they're
still around but you can say pure and

1170
00:28:56,299 --> 00:28:56,309
still around but you can say pure and
 

1171
00:28:56,309 --> 00:28:59,269
still around but you can say pure and
then you know if you if if whatever is

1172
00:28:59,269 --> 00:28:59,279
then you know if you if if whatever is
 

1173
00:28:59,279 --> 00:29:01,309
then you know if you if if whatever is
not declared as an input to do the hello

1174
00:29:01,309 --> 00:29:01,319
not declared as an input to do the hello
 

1175
00:29:01,319 --> 00:29:05,559
not declared as an input to do the hello
derivation will not be there so you know

1176
00:29:05,559 --> 00:29:05,569

 

1177
00:29:05,569 --> 00:29:08,419

now we're going to to a part where

1178
00:29:08,419 --> 00:29:08,429
now we're going to to a part where
 

1179
00:29:08,429 --> 00:29:12,439
now we're going to to a part where
workings become very blurry for most of

1180
00:29:12,439 --> 00:29:12,449
workings become very blurry for most of
 

1181
00:29:12,449 --> 00:29:14,479
workings become very blurry for most of
the people it's like how do you then use

1182
00:29:14,479 --> 00:29:14,489
the people it's like how do you then use
 

1183
00:29:14,489 --> 00:29:17,779
the people it's like how do you then use
this you know functional language as a

1184
00:29:17,779 --> 00:29:17,789
this you know functional language as a
 

1185
00:29:17,789 --> 00:29:20,299
this you know functional language as a
way to to override our packages like

1186
00:29:20,299 --> 00:29:20,309
way to to override our packages like
 

1187
00:29:20,309 --> 00:29:21,949
way to to override our packages like
that's what we kind of wanted right if

1188
00:29:21,949 --> 00:29:21,959
that's what we kind of wanted right if
 

1189
00:29:21,959 --> 00:29:23,629
that's what we kind of wanted right if
we want to have this precision then we

1190
00:29:23,629 --> 00:29:23,639
we want to have this precision then we
 

1191
00:29:23,639 --> 00:29:27,919
we want to have this precision then we
better use it and let's see let's see if

1192
00:29:27,919 --> 00:29:27,929
better use it and let's see let's see if
 

1193
00:29:27,929 --> 00:29:33,319
better use it and let's see let's see if
we can cover this quickly so a very

1194
00:29:33,319 --> 00:29:33,329
we can cover this quickly so a very
 

1195
00:29:33,329 --> 00:29:37,239
we can cover this quickly so a very
typical package would be something like

1196
00:29:37,239 --> 00:29:37,249
typical package would be something like
 

1197
00:29:37,249 --> 00:29:41,599
typical package would be something like
as I've said an input up there that you

1198
00:29:41,599 --> 00:29:41,609
as I've said an input up there that you
 

1199
00:29:41,609 --> 00:29:44,029
as I've said an input up there that you
paid rematch on all of the packages you

1200
00:29:44,029 --> 00:29:44,039
paid rematch on all of the packages you
 

1201
00:29:44,039 --> 00:29:46,879
paid rematch on all of the packages you
will you will need to Bill it and then

1202
00:29:46,879 --> 00:29:46,889
will you will need to Bill it and then
 

1203
00:29:46,889 --> 00:29:48,589
will you will need to Bill it and then
you would use the standard with make

1204
00:29:48,589 --> 00:29:48,599
you would use the standard with make
 

1205
00:29:48,599 --> 00:29:50,869
you would use the standard with make
derivation and then use those packages

1206
00:29:50,869 --> 00:29:50,879
derivation and then use those packages
 

1207
00:29:50,879 --> 00:29:55,549
derivation and then use those packages
as you go across the different stages

1208
00:29:55,549 --> 00:29:55,559
as you go across the different stages
 

1209
00:29:55,559 --> 00:29:57,770
as you go across the different stages
and the point is now you can override

1210
00:29:57,770 --> 00:29:57,780
and the point is now you can override
 

1211
00:29:57,780 --> 00:29:59,570
and the point is now you can override
these inputs or these packages that

1212
00:29:59,570 --> 00:29:59,580
these inputs or these packages that
 

1213
00:29:59,580 --> 00:30:02,029
these inputs or these packages that
you're getting in but first we need to

1214
00:30:02,029 --> 00:30:02,039
you're getting in but first we need to
 

1215
00:30:02,039 --> 00:30:04,279
you're getting in but first we need to
build a framework for that so the first

1216
00:30:04,279 --> 00:30:04,289
build a framework for that so the first
 

1217
00:30:04,289 --> 00:30:06,230
build a framework for that so the first
neat thing you would you know one would

1218
00:30:06,230 --> 00:30:06,240
neat thing you would you know one would
 

1219
00:30:06,240 --> 00:30:09,799
neat thing you would you know one would
do is you would have an attribute set of

1220
00:30:09,799 --> 00:30:09,809
do is you would have an attribute set of
 

1221
00:30:09,809 --> 00:30:11,870
do is you would have an attribute set of
packages you would import them and then

1222
00:30:11,870 --> 00:30:11,880
packages you would import them and then
 

1223
00:30:11,880 --> 00:30:16,070
packages you would import them and then
like fill in all of the inputs and and

1224
00:30:16,070 --> 00:30:16,080
like fill in all of the inputs and and
 

1225
00:30:16,080 --> 00:30:17,779
like fill in all of the inputs and and
these inputs would actually come from

1226
00:30:17,779 --> 00:30:17,789
these inputs would actually come from
 

1227
00:30:17,789 --> 00:30:20,149
these inputs would actually come from
this you know top level attributes set

1228
00:30:20,149 --> 00:30:20,159
this you know top level attributes set
 

1229
00:30:20,159 --> 00:30:23,840
this you know top level attributes set
so it would like feed them in so for

1230
00:30:23,840 --> 00:30:23,850
so it would like feed them in so for
 

1231
00:30:23,850 --> 00:30:26,390
so it would like feed them in so for
example input one would be here another

1232
00:30:26,390 --> 00:30:26,400
example input one would be here another
 

1233
00:30:26,400 --> 00:30:28,640
example input one would be here another
another package and input two would be

1234
00:30:28,640 --> 00:30:28,650
another package and input two would be
 

1235
00:30:28,650 --> 00:30:30,560
another package and input two would be
another package and so on so of course

1236
00:30:30,560 --> 00:30:30,570
another package and so on so of course
 

1237
00:30:30,570 --> 00:30:34,970
another package and so on so of course
you cannot have cycles right but that's

1238
00:30:34,970 --> 00:30:34,980
you cannot have cycles right but that's
 

1239
00:30:34,980 --> 00:30:37,940
you cannot have cycles right but that's
how how the top level mix packages

1240
00:30:37,940 --> 00:30:37,950
how how the top level mix packages
 

1241
00:30:37,950 --> 00:30:39,710
how how the top level mix packages
basically if you open that file you will

1242
00:30:39,710 --> 00:30:39,720
basically if you open that file you will
 

1243
00:30:39,720 --> 00:30:42,169
basically if you open that file you will
see a long list of packages like this

1244
00:30:42,169 --> 00:30:42,179
see a long list of packages like this
 

1245
00:30:42,179 --> 00:30:44,270
see a long list of packages like this
now the problem the problem here is that

1246
00:30:44,270 --> 00:30:44,280
now the problem the problem here is that
 

1247
00:30:44,280 --> 00:30:46,850
now the problem the problem here is that
every time you have to you have to like

1248
00:30:46,850 --> 00:30:46,860
every time you have to you have to like
 

1249
00:30:46,860 --> 00:30:49,520
every time you have to you have to like
every time if you rename input one for

1250
00:30:49,520 --> 00:30:49,530
every time if you rename input one for
 

1251
00:30:49,530 --> 00:30:51,529
every time if you rename input one for
example you would have to rename all the

1252
00:30:51,529 --> 00:30:51,539
example you would have to rename all the
 

1253
00:30:51,539 --> 00:30:53,419
example you would have to rename all the
packages that get it in and so on so

1254
00:30:53,419 --> 00:30:53,429
packages that get it in and so on so
 

1255
00:30:53,429 --> 00:30:56,930
packages that get it in and so on so
it's a bit cumbersome to do that so what

1256
00:30:56,930 --> 00:30:56,940
it's a bit cumbersome to do that so what
 

1257
00:30:56,940 --> 00:31:01,340
it's a bit cumbersome to do that so what
makes offers is this built-in called

1258
00:31:01,340 --> 00:31:01,350
makes offers is this built-in called
 

1259
00:31:01,350 --> 00:31:03,580
makes offers is this built-in called
function arcs where you can give it a

1260
00:31:03,580 --> 00:31:03,590
function arcs where you can give it a
 

1261
00:31:03,590 --> 00:31:07,669
function arcs where you can give it a
function that has a an attribute you

1262
00:31:07,669 --> 00:31:07,679
function that has a an attribute you
 

1263
00:31:07,679 --> 00:31:09,560
function that has a an attribute you
know that pattern matches an attribute

1264
00:31:09,560 --> 00:31:09,570
know that pattern matches an attribute
 

1265
00:31:09,570 --> 00:31:11,870
know that pattern matches an attribute
set and it will tell it you know what

1266
00:31:11,870 --> 00:31:11,880
set and it will tell it you know what
 

1267
00:31:11,880 --> 00:31:14,899
set and it will tell it you know what
inputs does this function have so it

1268
00:31:14,899 --> 00:31:14,909
inputs does this function have so it
 

1269
00:31:14,909 --> 00:31:18,070
inputs does this function have so it
will say oh it has an X which which

1270
00:31:18,070 --> 00:31:18,080
will say oh it has an X which which
 

1271
00:31:18,080 --> 00:31:20,330
will say oh it has an X which which
doesn't have a default this boolean

1272
00:31:20,330 --> 00:31:20,340
doesn't have a default this boolean
 

1273
00:31:20,340 --> 00:31:22,520
doesn't have a default this boolean
means if it has a default or not and it

1274
00:31:22,520 --> 00:31:22,530
means if it has a default or not and it
 

1275
00:31:22,530 --> 00:31:25,370
means if it has a default or not and it
has an epsilon that has a default right

1276
00:31:25,370 --> 00:31:25,380
has an epsilon that has a default right
 

1277
00:31:25,380 --> 00:31:30,500
has an epsilon that has a default right
so you know it's it's a bit more than

1278
00:31:30,500 --> 00:31:30,510
so you know it's it's a bit more than
 

1279
00:31:30,510 --> 00:31:32,720
so you know it's it's a bit more than
just that but what call package is

1280
00:31:32,720 --> 00:31:32,730
just that but what call package is
 

1281
00:31:32,730 --> 00:31:34,580
just that but what call package is
something you see in expect users very

1282
00:31:34,580 --> 00:31:34,590
something you see in expect users very
 

1283
00:31:34,590 --> 00:31:37,039
something you see in expect users very
often does is essentially that it

1284
00:31:37,039 --> 00:31:37,049
often does is essentially that it
 

1285
00:31:37,049 --> 00:31:39,409
often does is essentially that it
extracts all the inputs for this package

1286
00:31:39,409 --> 00:31:39,419
extracts all the inputs for this package
 

1287
00:31:39,419 --> 00:31:43,909
extracts all the inputs for this package
and it just you know figures out oh I

1288
00:31:43,909 --> 00:31:43,919
and it just you know figures out oh I
 

1289
00:31:43,919 --> 00:31:46,310
and it just you know figures out oh I
have to fill in the X input and the Y

1290
00:31:46,310 --> 00:31:46,320
have to fill in the X input and the Y
 

1291
00:31:46,320 --> 00:31:49,070
have to fill in the X input and the Y
input into here so you don't have to be

1292
00:31:49,070 --> 00:31:49,080
input into here so you don't have to be
 

1293
00:31:49,080 --> 00:31:51,080
input into here so you don't have to be
as explicit about it so you can pass an

1294
00:31:51,080 --> 00:31:51,090
as explicit about it so you can pass an
 

1295
00:31:51,090 --> 00:31:54,200
as explicit about it so you can pass an
empty attribute set but if you want to

1296
00:31:54,200 --> 00:31:54,210
empty attribute set but if you want to
 

1297
00:31:54,210 --> 00:31:56,390
empty attribute set but if you want to
be explicit and override an attribute

1298
00:31:56,390 --> 00:31:56,400
be explicit and override an attribute
 

1299
00:31:56,400 --> 00:31:57,830
be explicit and override an attribute
said you can just pass it in and

1300
00:31:57,830 --> 00:31:57,840
said you can just pass it in and
 

1301
00:31:57,840 --> 00:32:00,500
said you can just pass it in and
everything else will be you know kind of

1302
00:32:00,500 --> 00:32:00,510
everything else will be you know kind of
 

1303
00:32:00,510 --> 00:32:02,630
everything else will be you know kind of
like reflected from the function

1304
00:32:02,630 --> 00:32:02,640
like reflected from the function
 

1305
00:32:02,640 --> 00:32:04,850
like reflected from the function
arguments but this this one explicitly

1306
00:32:04,850 --> 00:32:04,860
arguments but this this one explicitly
 

1307
00:32:04,860 --> 00:32:07,800
arguments but this this one explicitly
will be overwritten is that

1308
00:32:07,800 --> 00:32:07,810
will be overwritten is that
 

1309
00:32:07,810 --> 00:32:12,850
will be overwritten is that
is that too magical or because the the

1310
00:32:12,850 --> 00:32:12,860
is that too magical or because the the
 

1311
00:32:12,860 --> 00:32:14,800
is that too magical or because the the
to define call package it's a bit of

1312
00:32:14,800 --> 00:32:14,810
to define call package it's a bit of
 

1313
00:32:14,810 --> 00:32:18,400
to define call package it's a bit of
work and hopefully you get the idea of

1314
00:32:18,400 --> 00:32:18,410
work and hopefully you get the idea of
 

1315
00:32:18,410 --> 00:32:21,430
work and hopefully you get the idea of
how the I will give it at the end and a

1316
00:32:21,430 --> 00:32:21,440
how the I will give it at the end and a
 

1317
00:32:21,440 --> 00:32:23,230
how the I will give it at the end and a
reference to Nick spills which is kind

1318
00:32:23,230 --> 00:32:23,240
reference to Nick spills which is kind
 

1319
00:32:23,240 --> 00:32:25,060
reference to Nick spills which is kind
of like the long version of what we're

1320
00:32:25,060 --> 00:32:25,070
of like the long version of what we're
 

1321
00:32:25,070 --> 00:32:39,760
of like the long version of what we're
going through why does it return false

1322
00:32:39,760 --> 00:32:39,770
going through why does it return false
 

1323
00:32:39,770 --> 00:32:41,830
going through why does it return false
or and true this is this basically means

1324
00:32:41,830 --> 00:32:41,840
or and true this is this basically means
 

1325
00:32:41,840 --> 00:32:44,320
or and true this is this basically means
does the in does the input have a

1326
00:32:44,320 --> 00:32:44,330
does the in does the input have a
 

1327
00:32:44,330 --> 00:32:48,370
does the in does the input have a
default value or not so this is the this

1328
00:32:48,370 --> 00:32:48,380
default value or not so this is the this
 

1329
00:32:48,380 --> 00:32:50,470
default value or not so this is the this
is the default so if you say a question

1330
00:32:50,470 --> 00:32:50,480
is the default so if you say a question
 

1331
00:32:50,480 --> 00:32:52,960
is the default so if you say a question
mark something then if you don't pass in

1332
00:32:52,960 --> 00:32:52,970
mark something then if you don't pass in
 

1333
00:32:52,970 --> 00:32:55,900
mark something then if you don't pass in
you know epsilon this will be the its

1334
00:32:55,900 --> 00:32:55,910
you know epsilon this will be the its
 

1335
00:32:55,910 --> 00:32:58,390
you know epsilon this will be the its
value and and this is so that you know

1336
00:32:58,390 --> 00:32:58,400
value and and this is so that you know
 

1337
00:32:58,400 --> 00:33:05,170
value and and this is so that you know
yeah sometimes it's useful but in in the

1338
00:33:05,170 --> 00:33:05,180
yeah sometimes it's useful but in in the
 

1339
00:33:05,180 --> 00:33:06,700
yeah sometimes it's useful but in in the
in the Cole package I don't think that's

1340
00:33:06,700 --> 00:33:06,710
in the Cole package I don't think that's
 

1341
00:33:06,710 --> 00:33:09,070
in the Cole package I don't think that's
really used it's more just what inputs

1342
00:33:09,070 --> 00:33:09,080
really used it's more just what inputs
 

1343
00:33:09,080 --> 00:33:14,320
really used it's more just what inputs
does it have to feel it any other

1344
00:33:14,320 --> 00:33:14,330
does it have to feel it any other
 

1345
00:33:14,330 --> 00:33:21,610
does it have to feel it any other
questions and then then what what call

1346
00:33:21,610 --> 00:33:21,620
questions and then then what what call
 

1347
00:33:21,620 --> 00:33:26,050
questions and then then what what call
package does is it adds on on the

1348
00:33:26,050 --> 00:33:26,060
package does is it adds on on the
 

1349
00:33:26,060 --> 00:33:28,560
package does is it adds on on the
derivation that's a couple of attributes

1350
00:33:28,560 --> 00:33:28,570
derivation that's a couple of attributes
 

1351
00:33:28,570 --> 00:33:32,050
derivation that's a couple of attributes
one is the the override function that

1352
00:33:32,050 --> 00:33:32,060
one is the the override function that
 

1353
00:33:32,060 --> 00:33:33,460
one is the the override function that
you can basically now take this

1354
00:33:33,460 --> 00:33:33,470
you can basically now take this
 

1355
00:33:33,470 --> 00:33:37,720
you can basically now take this
derivation and override it input so as

1356
00:33:37,720 --> 00:33:37,730
derivation and override it input so as
 

1357
00:33:37,730 --> 00:33:39,970
derivation and override it input so as
you see up here right these are these

1358
00:33:39,970 --> 00:33:39,980
you see up here right these are these
 

1359
00:33:39,980 --> 00:33:44,170
you see up here right these are these
are the inputs that we kind of used for

1360
00:33:44,170 --> 00:33:44,180
are the inputs that we kind of used for
 

1361
00:33:44,180 --> 00:33:48,610
are the inputs that we kind of used for
further derivation and and you can

1362
00:33:48,610 --> 00:33:48,620
further derivation and and you can
 

1363
00:33:48,620 --> 00:33:50,320
further derivation and and you can
override them so you can basically what

1364
00:33:50,320 --> 00:33:50,330
override them so you can basically what
 

1365
00:33:50,330 --> 00:33:51,940
override them so you can basically what
you can do is you can take I don't know

1366
00:33:51,940 --> 00:33:51,950
you can do is you can take I don't know
 

1367
00:33:51,950 --> 00:33:54,700
you can do is you can take I don't know
GHC and you say override use different

1368
00:33:54,700 --> 00:33:54,710
GHC and you say override use different
 

1369
00:33:54,710 --> 00:33:57,670
GHC and you say override use different
version of Lib GMP and you have to g8

1370
00:33:57,670 --> 00:33:57,680
version of Lib GMP and you have to g8
 

1371
00:33:57,680 --> 00:34:00,040
version of Lib GMP and you have to g8
sees now one built with with one version

1372
00:34:00,040 --> 00:34:00,050
sees now one built with with one version
 

1373
00:34:00,050 --> 00:34:02,080
sees now one built with with one version
of the library and one with the other

1374
00:34:02,080 --> 00:34:02,090
of the library and one with the other
 

1375
00:34:02,090 --> 00:34:05,980
of the library and one with the other
and you can basically use this

1376
00:34:05,980 --> 00:34:05,990
and you can basically use this
 

1377
00:34:05,990 --> 00:34:08,889
and you can basically use this
overriding mechanisms you to be to build

1378
00:34:08,889 --> 00:34:08,899
overriding mechanisms you to be to build
 

1379
00:34:08,899 --> 00:34:10,480
overriding mechanisms you to be to build
you know different different different

1380
00:34:10,480 --> 00:34:10,490
you know different different different
 

1381
00:34:10,490 --> 00:34:12,550
you know different different different
sets so one of the things I did in the

1382
00:34:12,550 --> 00:34:12,560
sets so one of the things I did in the
 

1383
00:34:12,560 --> 00:34:17,619
sets so one of the things I did in the
past is basically we wanted to test we

1384
00:34:17,619 --> 00:34:17,629
past is basically we wanted to test we
 

1385
00:34:17,629 --> 00:34:20,379
past is basically we wanted to test we
wanted to batch benchmark software and

1386
00:34:20,379 --> 00:34:20,389
wanted to batch benchmark software and
 

1387
00:34:20,389 --> 00:34:21,970
wanted to batch benchmark software and
we basically did

1388
00:34:21,970 --> 00:34:21,980
we basically did
 

1389
00:34:21,980 --> 00:34:24,550
we basically did
matrix of different kernels of qmo

1390
00:34:24,550 --> 00:34:24,560
matrix of different kernels of qmo
 

1391
00:34:24,560 --> 00:34:27,099
matrix of different kernels of qmo
versions and so on and basically use

1392
00:34:27,099 --> 00:34:27,109
versions and so on and basically use
 

1393
00:34:27,109 --> 00:34:30,069
versions and so on and basically use
that to benchmark the the software but

1394
00:34:30,069 --> 00:34:30,079
that to benchmark the the software but
 

1395
00:34:30,079 --> 00:34:34,750
that to benchmark the the software but
basically by just overriding which is

1396
00:34:34,750 --> 00:34:34,760
basically by just overriding which is
 

1397
00:34:34,760 --> 00:34:36,609
basically by just overriding which is
something you cannot really do in docker

1398
00:34:36,609 --> 00:34:36,619
something you cannot really do in docker
 

1399
00:34:36,619 --> 00:34:42,940
something you cannot really do in docker
or it was like that and and this one

1400
00:34:42,940 --> 00:34:42,950
or it was like that and and this one
 

1401
00:34:42,950 --> 00:34:45,460
or it was like that and and this one
actually overrides at this these

1402
00:34:45,460 --> 00:34:45,470
actually overrides at this these
 

1403
00:34:45,470 --> 00:34:47,349
actually overrides at this these
attributes here here that's faceted to

1404
00:34:47,349 --> 00:34:47,359
attributes here here that's faceted to
 

1405
00:34:47,359 --> 00:34:49,899
attributes here here that's faceted to
make the relation doesn't say so

1406
00:34:49,899 --> 00:34:49,909
make the relation doesn't say so
 

1407
00:34:49,909 --> 00:34:53,470
make the relation doesn't say so
yeah this attributes here that it's best

1408
00:34:53,470 --> 00:34:53,480
yeah this attributes here that it's best
 

1409
00:34:53,480 --> 00:34:55,060
yeah this attributes here that it's best
to make the relation so you can either

1410
00:34:55,060 --> 00:34:55,070
to make the relation so you can either
 

1411
00:34:55,070 --> 00:34:57,550
to make the relation so you can either
override a function up here or the

1412
00:34:57,550 --> 00:34:57,560
override a function up here or the
 

1413
00:34:57,560 --> 00:35:00,700
override a function up here or the
attributes at past which which can also

1414
00:35:00,700 --> 00:35:00,710
attributes at past which which can also
 

1415
00:35:00,710 --> 00:35:02,859
attributes at past which which can also
you know be a well you know there can be

1416
00:35:02,859 --> 00:35:02,869
you know be a well you know there can be
 

1417
00:35:02,869 --> 00:35:06,069
you know be a well you know there can be
left in in in between and it can do you

1418
00:35:06,069 --> 00:35:06,079
left in in in between and it can do you
 

1419
00:35:06,079 --> 00:35:08,079
left in in in between and it can do you
know some concatenation or something so

1420
00:35:08,079 --> 00:35:08,089
know some concatenation or something so
 

1421
00:35:08,089 --> 00:35:12,660
know some concatenation or something so
it can it can have different values

1422
00:35:12,660 --> 00:35:12,670
it can it can have different values
 

1423
00:35:12,670 --> 00:35:15,310
it can it can have different values
there so this is like the the high level

1424
00:35:15,310 --> 00:35:15,320
there so this is like the the high level
 

1425
00:35:15,320 --> 00:35:19,359
there so this is like the the high level
of writing then there is this this blog

1426
00:35:19,359 --> 00:35:19,369
of writing then there is this this blog
 

1427
00:35:19,369 --> 00:35:22,750
of writing then there is this this blog
post a gift by Russell O'Connor in 2014

1428
00:35:22,750 --> 00:35:22,760
post a gift by Russell O'Connor in 2014
 

1429
00:35:22,760 --> 00:35:26,290
post a gift by Russell O'Connor in 2014
where he goes to explore how do you do

1430
00:35:26,290 --> 00:35:26,300
where he goes to explore how do you do
 

1431
00:35:26,300 --> 00:35:28,450
where he goes to explore how do you do
dynamic biting and nicks right so the

1432
00:35:28,450 --> 00:35:28,460
dynamic biting and nicks right so the
 

1433
00:35:28,460 --> 00:35:31,740
dynamic biting and nicks right so the
problem is if you have an attribute set

1434
00:35:31,740 --> 00:35:31,750
problem is if you have an attribute set
 

1435
00:35:31,750 --> 00:35:34,660
problem is if you have an attribute set
like this and you use the req function

1436
00:35:34,660 --> 00:35:34,670
like this and you use the req function
 

1437
00:35:34,670 --> 00:35:38,079
like this and you use the req function
then you know X here will will come from

1438
00:35:38,079 --> 00:35:38,089
then you know X here will will come from
 

1439
00:35:38,089 --> 00:35:41,829
then you know X here will will come from
from from this definition but if you if

1440
00:35:41,829 --> 00:35:41,839
from from this definition but if you if
 

1441
00:35:41,839 --> 00:35:43,990
from from this definition but if you if
you use if you merge attribute set which

1442
00:35:43,990 --> 00:35:44,000
you use if you merge attribute set which
 

1443
00:35:44,000 --> 00:35:45,370
you use if you merge attribute set which
is something that you know you take an

1444
00:35:45,370 --> 00:35:45,380
is something that you know you take an
 

1445
00:35:45,380 --> 00:35:46,750
is something that you know you take an
attribute set and another one and you

1446
00:35:46,750 --> 00:35:46,760
attribute set and another one and you
 

1447
00:35:46,760 --> 00:35:49,690
attribute set and another one and you
merge them together then that then this

1448
00:35:49,690 --> 00:35:49,700
merge them together then that then this
 

1449
00:35:49,700 --> 00:35:51,370
merge them together then that then this
wreak function won't have an effect

1450
00:35:51,370 --> 00:35:51,380
wreak function won't have an effect
 

1451
00:35:51,380 --> 00:35:54,550
wreak function won't have an effect
anymore it's it's only it's local to

1452
00:35:54,550 --> 00:35:54,560
anymore it's it's only it's local to
 

1453
00:35:54,560 --> 00:35:57,190
anymore it's it's only it's local to
this attribute set up here so you will

1454
00:35:57,190 --> 00:35:57,200
this attribute set up here so you will
 

1455
00:35:57,200 --> 00:35:59,170
this attribute set up here so you will
see that the X here will we'll have this

1456
00:35:59,170 --> 00:35:59,180
see that the X here will we'll have this
 

1457
00:35:59,180 --> 00:36:02,980
see that the X here will we'll have this
overridden form def but the the rec part

1458
00:36:02,980 --> 00:36:02,990
overridden form def but the the rec part
 

1459
00:36:02,990 --> 00:36:04,660
overridden form def but the the rec part
that was ever lated here actually

1460
00:36:04,660 --> 00:36:04,670
that was ever lated here actually
 

1461
00:36:04,670 --> 00:36:07,030
that was ever lated here actually
evaluated this X in the original

1462
00:36:07,030 --> 00:36:07,040
evaluated this X in the original
 

1463
00:36:07,040 --> 00:36:11,020
evaluated this X in the original
attribute set right so then why is this

1464
00:36:11,020 --> 00:36:11,030
attribute set right so then why is this
 

1465
00:36:11,030 --> 00:36:13,059
attribute set right so then why is this
really important because we want to have

1466
00:36:13,059 --> 00:36:13,069
really important because we want to have
 

1467
00:36:13,069 --> 00:36:15,730
really important because we want to have
a package set and we want to add new

1468
00:36:15,730 --> 00:36:15,740
a package set and we want to add new
 

1469
00:36:15,740 --> 00:36:18,700
a package set and we want to add new
things to it but we don't want we don't

1470
00:36:18,700 --> 00:36:18,710
things to it but we don't want we don't
 

1471
00:36:18,710 --> 00:36:21,520
things to it but we don't want we don't
want the any reference values in the

1472
00:36:21,520 --> 00:36:21,530
want the any reference values in the
 

1473
00:36:21,530 --> 00:36:23,589
want the any reference values in the
original ones to to keep the old the old

1474
00:36:23,589 --> 00:36:23,599
original ones to to keep the old the old
 

1475
00:36:23,599 --> 00:36:25,390
original ones to to keep the old the old
values right we want the whole thing to

1476
00:36:25,390 --> 00:36:25,400
values right we want the whole thing to
 

1477
00:36:25,400 --> 00:36:29,380
values right we want the whole thing to
to actually to be precisely overwritten

1478
00:36:29,380 --> 00:36:29,390
to actually to be precisely overwritten
 

1479
00:36:29,390 --> 00:36:32,620
to actually to be precisely overwritten
so what we do is we define the fixed

1480
00:36:32,620 --> 00:36:32,630
so what we do is we define the fixed
 

1481
00:36:32,630 --> 00:36:34,150
so what we do is we define the fixed
point or the Y Combinator

1482
00:36:34,150 --> 00:36:34,160
point or the Y Combinator
 

1483
00:36:34,160 --> 00:36:37,060
point or the Y Combinator
like right here and I won't go into you

1484
00:36:37,060 --> 00:36:37,070
like right here and I won't go into you
 

1485
00:36:37,070 --> 00:36:39,280
like right here and I won't go into you
know how that most of you probably

1486
00:36:39,280 --> 00:36:39,290
know how that most of you probably
 

1487
00:36:39,290 --> 00:36:43,720
know how that most of you probably
already know if you don't and yeah

1488
00:36:43,720 --> 00:36:43,730
already know if you don't and yeah
 

1489
00:36:43,730 --> 00:36:44,980
already know if you don't and yeah
there's there's enough materials out

1490
00:36:44,980 --> 00:36:44,990
there's there's enough materials out
 

1491
00:36:44,990 --> 00:36:46,630
there's there's enough materials out
there so what weather it basically does

1492
00:36:46,630 --> 00:36:46,640
there so what weather it basically does
 

1493
00:36:46,640 --> 00:36:50,680
there so what weather it basically does
this this fixed function then gets

1494
00:36:50,680 --> 00:36:50,690
this this fixed function then gets
 

1495
00:36:50,690 --> 00:36:53,710
this this fixed function then gets
basically the return value as an input

1496
00:36:53,710 --> 00:36:53,720
basically the return value as an input
 

1497
00:36:53,720 --> 00:36:56,920
basically the return value as an input
and then you can basically instead of

1498
00:36:56,920 --> 00:36:56,930
and then you can basically instead of
 

1499
00:36:56,930 --> 00:36:59,800
and then you can basically instead of
using the rack you do self eggs and then

1500
00:36:59,800 --> 00:36:59,810
using the rack you do self eggs and then
 

1501
00:36:59,810 --> 00:37:02,050
using the rack you do self eggs and then
what you can do is you can stack these

1502
00:37:02,050 --> 00:37:02,060
what you can do is you can stack these
 

1503
00:37:02,060 --> 00:37:05,200
what you can do is you can stack these
attribute sets together and you get them

1504
00:37:05,200 --> 00:37:05,210
attribute sets together and you get them
 

1505
00:37:05,210 --> 00:37:08,260
attribute sets together and you get them
as an input also this would be later how

1506
00:37:08,260 --> 00:37:08,270
as an input also this would be later how
 

1507
00:37:08,270 --> 00:37:10,630
as an input also this would be later how
it works but you know this is kind of

1508
00:37:10,630 --> 00:37:10,640
it works but you know this is kind of
 

1509
00:37:10,640 --> 00:37:13,210
it works but you know this is kind of
like the baseline this is the this is

1510
00:37:13,210 --> 00:37:13,220
like the baseline this is the this is
 

1511
00:37:13,220 --> 00:37:15,190
like the baseline this is the this is
one of the parts that you know it's kind

1512
00:37:15,190 --> 00:37:15,200
one of the parts that you know it's kind
 

1513
00:37:15,200 --> 00:37:19,570
one of the parts that you know it's kind
of hard to grasp but but the fixed point

1514
00:37:19,570 --> 00:37:19,580
of hard to grasp but but the fixed point
 

1515
00:37:19,580 --> 00:37:24,070
of hard to grasp but but the fixed point
is kind of the build to build that our

1516
00:37:24,070 --> 00:37:24,080
is kind of the build to build that our
 

1517
00:37:24,080 --> 00:37:26,890
is kind of the build to build that our
helper here and there is a bit of other

1518
00:37:26,890 --> 00:37:26,900
helper here and there is a bit of other
 

1519
00:37:26,900 --> 00:37:29,290
helper here and there is a bit of other
things that that he does in the blog

1520
00:37:29,290 --> 00:37:29,300
things that that he does in the blog
 

1521
00:37:29,300 --> 00:37:34,060
things that that he does in the blog
post trying to build a framework for for

1522
00:37:34,060 --> 00:37:34,070
post trying to build a framework for for
 

1523
00:37:34,070 --> 00:37:36,400
post trying to build a framework for for
for this of a writing of package sets

1524
00:37:36,400 --> 00:37:36,410
for this of a writing of package sets
 

1525
00:37:36,410 --> 00:37:40,200
for this of a writing of package sets
which will see very soon yeah I I

1526
00:37:40,200 --> 00:37:40,210
which will see very soon yeah I I
 

1527
00:37:40,210 --> 00:37:42,310
which will see very soon yeah I I
haven't bothered to go through the whole

1528
00:37:42,310 --> 00:37:42,320
haven't bothered to go through the whole
 

1529
00:37:42,320 --> 00:37:44,230
haven't bothered to go through the whole
thing it's pretty long actually

1530
00:37:44,230 --> 00:37:44,240
thing it's pretty long actually
 

1531
00:37:44,240 --> 00:37:46,930
thing it's pretty long actually
but you'll you'll see how it's used then

1532
00:37:46,930 --> 00:37:46,940
but you'll you'll see how it's used then
 

1533
00:37:46,940 --> 00:37:49,540
but you'll you'll see how it's used then
if you if you know that it's a fixed

1534
00:37:49,540 --> 00:37:49,550
if you if you know that it's a fixed
 

1535
00:37:49,550 --> 00:37:51,610
if you if you know that it's a fixed
point I think that's enough to to to

1536
00:37:51,610 --> 00:37:51,620
point I think that's enough to to to
 

1537
00:37:51,620 --> 00:37:56,050
point I think that's enough to to to
understand how it works okay so so this

1538
00:37:56,050 --> 00:37:56,060
understand how it works okay so so this
 

1539
00:37:56,060 --> 00:37:58,390
understand how it works okay so so this
is the overriding part how do we

1540
00:37:58,390 --> 00:37:58,400
is the overriding part how do we
 

1541
00:37:58,400 --> 00:38:00,790
is the overriding part how do we
override packages and how do we use then

1542
00:38:00,790 --> 00:38:00,800
override packages and how do we use then
 

1543
00:38:00,800 --> 00:38:03,610
override packages and how do we use then
you know the lake's language to to

1544
00:38:03,610 --> 00:38:03,620
you know the lake's language to to
 

1545
00:38:03,620 --> 00:38:06,250
you know the lake's language to to
really to get the to solve basically the

1546
00:38:06,250 --> 00:38:06,260
really to get the to solve basically the
 

1547
00:38:06,260 --> 00:38:08,940
really to get the to solve basically the
dependency held the multi version hell

1548
00:38:08,940 --> 00:38:08,950
dependency held the multi version hell
 

1549
00:38:08,950 --> 00:38:17,060
dependency held the multi version hell
and and be precise about it

1550
00:38:17,060 --> 00:38:17,070

 

1551
00:38:17,070 --> 00:38:28,010

sang-doo slash slash

1552
00:38:28,010 --> 00:38:28,020

 

1553
00:38:28,020 --> 00:38:30,570

yes oh so there is there is one part

1554
00:38:30,570 --> 00:38:30,580
yes oh so there is there is one part
 

1555
00:38:30,580 --> 00:38:32,280
yes oh so there is there is one part
missing here which will which I'll show

1556
00:38:32,280 --> 00:38:32,290
missing here which will which I'll show
 

1557
00:38:32,290 --> 00:38:34,230
missing here which will which I'll show
a few slides later on how how that

1558
00:38:34,230 --> 00:38:34,240
a few slides later on how how that
 

1559
00:38:34,240 --> 00:38:36,690
a few slides later on how how that
really then is used to merge the

1560
00:38:36,690 --> 00:38:36,700
really then is used to merge the
 

1561
00:38:36,700 --> 00:38:45,060
really then is used to merge the
attribute sets okay now I want to now

1562
00:38:45,060 --> 00:38:45,070
attribute sets okay now I want to now
 

1563
00:38:45,070 --> 00:38:47,790
attribute sets okay now I want to now
move into more howhow Haskel ecosystem

1564
00:38:47,790 --> 00:38:47,800
move into more howhow Haskel ecosystem
 

1565
00:38:47,800 --> 00:38:50,580
move into more howhow Haskel ecosystem
uses links first of all there's the

1566
00:38:50,580 --> 00:38:50,590
uses links first of all there's the
 

1567
00:38:50,590 --> 00:38:52,860
uses links first of all there's the
stack tunics integration it's like with

1568
00:38:52,860 --> 00:38:52,870
stack tunics integration it's like with
 

1569
00:38:52,870 --> 00:38:55,110
stack tunics integration it's like with
Knicks integration that most of you use

1570
00:38:55,110 --> 00:38:55,120
Knicks integration that most of you use
 

1571
00:38:55,120 --> 00:39:00,540
Knicks integration that most of you use
if you use Cardno and basically what it

1572
00:39:00,540 --> 00:39:00,550
if you use Cardno and basically what it
 

1573
00:39:00,550 --> 00:39:02,820
if you use Cardno and basically what it
does if you say in stock that the ml

1574
00:39:02,820 --> 00:39:02,830
does if you say in stock that the ml
 

1575
00:39:02,830 --> 00:39:05,640
does if you say in stock that the ml
file enable and you know here are the

1576
00:39:05,640 --> 00:39:05,650
file enable and you know here are the
 

1577
00:39:05,650 --> 00:39:08,250
file enable and you know here are the
packages then what it does is is behind

1578
00:39:08,250 --> 00:39:08,260
packages then what it does is is behind
 

1579
00:39:08,260 --> 00:39:10,140
packages then what it does is is behind
the scenes it calls stack you know if

1580
00:39:10,140 --> 00:39:10,150
the scenes it calls stack you know if
 

1581
00:39:10,150 --> 00:39:12,210
the scenes it calls stack you know if
you call stack install it basically

1582
00:39:12,210 --> 00:39:12,220
you call stack install it basically
 

1583
00:39:12,220 --> 00:39:14,910
you call stack install it basically
execute you know Nick shell it basically

1584
00:39:14,910 --> 00:39:14,920
execute you know Nick shell it basically
 

1585
00:39:14,920 --> 00:39:18,300
execute you know Nick shell it basically
constructs this this common liner and

1586
00:39:18,300 --> 00:39:18,310
constructs this this common liner and
 

1587
00:39:18,310 --> 00:39:21,060
constructs this this common liner and
then it calls stack again so that's it

1588
00:39:21,060 --> 00:39:21,070
then it calls stack again so that's it
 

1589
00:39:21,070 --> 00:39:23,940
then it calls stack again so that's it
reap asses the arguments so it's

1590
00:39:23,940 --> 00:39:23,950
reap asses the arguments so it's
 

1591
00:39:23,950 --> 00:39:25,440
reap asses the arguments so it's
basically the same thing as you would

1592
00:39:25,440 --> 00:39:25,450
basically the same thing as you would
 

1593
00:39:25,450 --> 00:39:28,110
basically the same thing as you would
you would say Nick shell and and these

1594
00:39:28,110 --> 00:39:28,120
you would say Nick shell and and these
 

1595
00:39:28,120 --> 00:39:29,400
you would say Nick shell and and these
two packages and then you would call

1596
00:39:29,400 --> 00:39:29,410
two packages and then you would call
 

1597
00:39:29,410 --> 00:39:31,170
two packages and then you would call
stack it's just a clarity of in the

1598
00:39:31,170 --> 00:39:31,180
stack it's just a clarity of in the
 

1599
00:39:31,180 --> 00:39:34,620
stack it's just a clarity of in the
stack file alright and you can go a step

1600
00:39:34,620 --> 00:39:34,630
stack file alright and you can go a step
 

1601
00:39:34,630 --> 00:39:37,170
stack file alright and you can go a step
further to say okay don't like lease the

1602
00:39:37,170 --> 00:39:37,180
further to say okay don't like lease the
 

1603
00:39:37,180 --> 00:39:39,780
further to say okay don't like lease the
packages but actually use an X file and

1604
00:39:39,780 --> 00:39:39,790
packages but actually use an X file and
 

1605
00:39:39,790 --> 00:39:42,060
packages but actually use an X file and
then it's the same thing as a Nick shell

1606
00:39:42,060 --> 00:39:42,070
then it's the same thing as a Nick shell
 

1607
00:39:42,070 --> 00:39:44,670
then it's the same thing as a Nick shell
and then you know executing stack within

1608
00:39:44,670 --> 00:39:44,680
and then you know executing stack within
 

1609
00:39:44,680 --> 00:39:46,470
and then you know executing stack within
that and the purpose is of course to

1610
00:39:46,470 --> 00:39:46,480
that and the purpose is of course to
 

1611
00:39:46,480 --> 00:39:49,500
that and the purpose is of course to
provide the system libraries to stack

1612
00:39:49,500 --> 00:39:49,510
provide the system libraries to stack
 

1613
00:39:49,510 --> 00:39:52,470
provide the system libraries to stack
the problem with with this approach is

1614
00:39:52,470 --> 00:39:52,480
the problem with with this approach is
 

1615
00:39:52,480 --> 00:39:56,330
the problem with with this approach is
that stack stack knows precisely what

1616
00:39:56,330 --> 00:39:56,340
that stack stack knows precisely what
 

1617
00:39:56,340 --> 00:39:59,190
that stack stack knows precisely what
Haskell packages it wants to build but

1618
00:39:59,190 --> 00:39:59,200
Haskell packages it wants to build but
 

1619
00:39:59,200 --> 00:40:01,560
Haskell packages it wants to build but
it has no idea about the global system

1620
00:40:01,560 --> 00:40:01,570
it has no idea about the global system
 

1621
00:40:01,570 --> 00:40:03,810
it has no idea about the global system
state so every time you you change

1622
00:40:03,810 --> 00:40:03,820
state so every time you you change
 

1623
00:40:03,820 --> 00:40:05,760
state so every time you you change
basically Nick shell anything in it it

1624
00:40:05,760 --> 00:40:05,770
basically Nick shell anything in it it
 

1625
00:40:05,770 --> 00:40:07,470
basically Nick shell anything in it it
will like recompile everything from

1626
00:40:07,470 --> 00:40:07,480
will like recompile everything from
 

1627
00:40:07,480 --> 00:40:09,990
will like recompile everything from
scratch because it's like oh I have no

1628
00:40:09,990 --> 00:40:10,000
scratch because it's like oh I have no
 

1629
00:40:10,000 --> 00:40:12,870
scratch because it's like oh I have no
idea how this effects right my all of

1630
00:40:12,870 --> 00:40:12,880
idea how this effects right my all of
 

1631
00:40:12,880 --> 00:40:14,790
idea how this effects right my all of
the build so the best thing to do is to

1632
00:40:14,790 --> 00:40:14,800
the build so the best thing to do is to
 

1633
00:40:14,800 --> 00:40:18,600
the build so the best thing to do is to
start from scratch and and that's yeah

1634
00:40:18,600 --> 00:40:18,610
start from scratch and and that's yeah
 

1635
00:40:18,610 --> 00:40:20,220
start from scratch and and that's yeah
really unfortunate when you have a

1636
00:40:20,220 --> 00:40:20,230
really unfortunate when you have a
 

1637
00:40:20,230 --> 00:40:22,670
really unfortunate when you have a
creditor which has like a 360

1638
00:40:22,670 --> 00:40:22,680
creditor which has like a 360
 

1639
00:40:22,680 --> 00:40:25,530
creditor which has like a 360
dependencies if you want to build full

1640
00:40:25,530 --> 00:40:25,540
dependencies if you want to build full
 

1641
00:40:25,540 --> 00:40:28,600
dependencies if you want to build full
thing

1642
00:40:28,600 --> 00:40:28,610

 

1643
00:40:28,610 --> 00:40:32,330

so yeah let's get into a bit of

1644
00:40:32,330 --> 00:40:32,340
so yeah let's get into a bit of
 

1645
00:40:32,340 --> 00:40:34,760
so yeah let's get into a bit of
infrastructure of haskó and minks and

1646
00:40:34,760 --> 00:40:34,770
infrastructure of haskó and minks and
 

1647
00:40:34,770 --> 00:40:37,310
infrastructure of haskó and minks and
there is this cabal tuning tool that

1648
00:40:37,310 --> 00:40:37,320
there is this cabal tuning tool that
 

1649
00:40:37,320 --> 00:40:40,300
there is this cabal tuning tool that
basically parses Cabala file and

1650
00:40:40,300 --> 00:40:40,310
basically parses Cabala file and
 

1651
00:40:40,310 --> 00:40:42,950
basically parses Cabala file and
translated into how NICs would build

1652
00:40:42,950 --> 00:40:42,960
translated into how NICs would build
 

1653
00:40:42,960 --> 00:40:47,870
translated into how NICs would build
that that cabal file so it takes haskell

1654
00:40:47,870 --> 00:40:47,880
that that cabal file so it takes haskell
 

1655
00:40:47,880 --> 00:40:50,240
that that cabal file so it takes haskell
infrastructure divided defines another

1656
00:40:50,240 --> 00:40:50,250
infrastructure divided defines another
 

1657
00:40:50,250 --> 00:40:52,730
infrastructure divided defines another
mega derivation which is like one step

1658
00:40:52,730 --> 00:40:52,740
mega derivation which is like one step
 

1659
00:40:52,740 --> 00:40:55,820
mega derivation which is like one step
you know it it wraps the make derivation

1660
00:40:55,820 --> 00:40:55,830
you know it it wraps the make derivation
 

1661
00:40:55,830 --> 00:40:57,830
you know it it wraps the make derivation
for the standard environment and it

1662
00:40:57,830 --> 00:40:57,840
for the standard environment and it
 

1663
00:40:57,840 --> 00:40:59,960
for the standard environment and it
defines like Haskell specific attributes

1664
00:40:59,960 --> 00:40:59,970
defines like Haskell specific attributes
 

1665
00:40:59,970 --> 00:41:04,790
defines like Haskell specific attributes
that you can then tweak like is this

1666
00:41:04,790 --> 00:41:04,800
that you can then tweak like is this
 

1667
00:41:04,800 --> 00:41:06,800
that you can then tweak like is this
should we build the library should we

1668
00:41:06,800 --> 00:41:06,810
should we build the library should we
 

1669
00:41:06,810 --> 00:41:08,240
should we build the library should we
build an executable what are the

1670
00:41:08,240 --> 00:41:08,250
build an executable what are the
 

1671
00:41:08,250 --> 00:41:09,890
build an executable what are the
dependencies of the library test

1672
00:41:09,890 --> 00:41:09,900
dependencies of the library test
 

1673
00:41:09,900 --> 00:41:12,020
dependencies of the library test
executable and so on and this is all

1674
00:41:12,020 --> 00:41:12,030
executable and so on and this is all
 

1675
00:41:12,030 --> 00:41:14,570
executable and so on and this is all
extracted from the from the cabal file

1676
00:41:14,570 --> 00:41:14,580
extracted from the from the cabal file
 

1677
00:41:14,580 --> 00:41:17,690
extracted from the from the cabal file
and and all of the values used here are

1678
00:41:17,690 --> 00:41:17,700
and and all of the values used here are
 

1679
00:41:17,700 --> 00:41:21,110
and and all of the values used here are
also in the closure of this function

1680
00:41:21,110 --> 00:41:21,120
also in the closure of this function
 

1681
00:41:21,120 --> 00:41:23,030
also in the closure of this function
here so that we can override it right so

1682
00:41:23,030 --> 00:41:23,040
here so that we can override it right so
 

1683
00:41:23,040 --> 00:41:25,100
here so that we can override it right so
that we have this power from the for

1684
00:41:25,100 --> 00:41:25,110
that we have this power from the for
 

1685
00:41:25,110 --> 00:41:27,170
that we have this power from the for
that we can override this up here this

1686
00:41:27,170 --> 00:41:27,180
that we can override this up here this
 

1687
00:41:27,180 --> 00:41:29,620
that we can override this up here this
function up here and that you know

1688
00:41:29,620 --> 00:41:29,630
function up here and that you know
 

1689
00:41:29,630 --> 00:41:33,830
function up here and that you know
reflects then in the derivation build

1690
00:41:33,830 --> 00:41:33,840
reflects then in the derivation build
 

1691
00:41:33,840 --> 00:41:37,880
reflects then in the derivation build
for alex in this example and then you

1692
00:41:37,880 --> 00:41:37,890
for alex in this example and then you
 

1693
00:41:37,890 --> 00:41:39,290
for alex in this example and then you
know what we do we go through the whole

1694
00:41:39,290 --> 00:41:39,300
know what we do we go through the whole
 

1695
00:41:39,300 --> 00:41:41,630
know what we do we go through the whole
hackett and call basically cobalt unix

1696
00:41:41,630 --> 00:41:41,640
hackett and call basically cobalt unix
 

1697
00:41:41,640 --> 00:41:44,120
hackett and call basically cobalt unix
on all the packages and you get this

1698
00:41:44,120 --> 00:41:44,130
on all the packages and you get this
 

1699
00:41:44,130 --> 00:41:47,240
on all the packages and you get this
huge attribute set right in the past

1700
00:41:47,240 --> 00:41:47,250
huge attribute set right in the past
 

1701
00:41:47,250 --> 00:41:49,610
huge attribute set right in the past
before snackage came we kind of like

1702
00:41:49,610 --> 00:41:49,620
before snackage came we kind of like
 

1703
00:41:49,620 --> 00:41:53,270
before snackage came we kind of like
petty used to you know try try and build

1704
00:41:53,270 --> 00:41:53,280
petty used to you know try try and build
 

1705
00:41:53,280 --> 00:41:55,310
petty used to you know try try and build
things together now we just default to

1706
00:41:55,310 --> 00:41:55,320
things together now we just default to
 

1707
00:41:55,320 --> 00:41:58,010
things together now we just default to
the latest takács and then we the rest

1708
00:41:58,010 --> 00:41:58,020
the latest takács and then we the rest
 

1709
00:41:58,020 --> 00:41:59,720
the latest takács and then we the rest
of the packages we take the latest

1710
00:41:59,720 --> 00:41:59,730
of the packages we take the latest
 

1711
00:41:59,730 --> 00:42:04,580
of the packages we take the latest
version so we basically curate the

1712
00:42:04,580 --> 00:42:04,590
version so we basically curate the
 

1713
00:42:04,590 --> 00:42:06,290
version so we basically curate the
packages that are not in stack age

1714
00:42:06,290 --> 00:42:06,300
packages that are not in stack age
 

1715
00:42:06,300 --> 00:42:08,420
packages that are not in stack age
because we want to have the full later

1716
00:42:08,420 --> 00:42:08,430
because we want to have the full later
 

1717
00:42:08,430 --> 00:42:11,030
because we want to have the full later
set we used to have the full history but

1718
00:42:11,030 --> 00:42:11,040
set we used to have the full history but
 

1719
00:42:11,040 --> 00:42:12,470
set we used to have the full history but
that was like you know it would be a

1720
00:42:12,470 --> 00:42:12,480
that was like you know it would be a
 

1721
00:42:12,480 --> 00:42:16,820
that was like you know it would be a
couple of megabytes right now so it's

1722
00:42:16,820 --> 00:42:16,830
couple of megabytes right now so it's
 

1723
00:42:16,830 --> 00:42:18,710
couple of megabytes right now so it's
doable but you know if somebody would

1724
00:42:18,710 --> 00:42:18,720
doable but you know if somebody would
 

1725
00:42:18,720 --> 00:42:20,540
doable but you know if somebody would
want to do like a community project it's

1726
00:42:20,540 --> 00:42:20,550
want to do like a community project it's
 

1727
00:42:20,550 --> 00:42:22,220
want to do like a community project it's
doable to build all of this I think we

1728
00:42:22,220 --> 00:42:22,230
doable to build all of this I think we
 

1729
00:42:22,230 --> 00:42:23,930
doable to build all of this I think we
calculated if you want to build like

1730
00:42:23,930 --> 00:42:23,940
calculated if you want to build like
 

1731
00:42:23,940 --> 00:42:26,450
calculated if you want to build like
with profiling and without the profiling

1732
00:42:26,450 --> 00:42:26,460
with profiling and without the profiling
 

1733
00:42:26,460 --> 00:42:29,630
with profiling and without the profiling
and the whole it would be like 20 or 15

1734
00:42:29,630 --> 00:42:29,640
and the whole it would be like 20 or 15
 

1735
00:42:29,640 --> 00:42:32,240
and the whole it would be like 20 or 15
terabytes of all together to have the

1736
00:42:32,240 --> 00:42:32,250
terabytes of all together to have the
 

1737
00:42:32,250 --> 00:42:34,430
terabytes of all together to have the
whole package in all the common ways to

1738
00:42:34,430 --> 00:42:34,440
whole package in all the common ways to
 

1739
00:42:34,440 --> 00:42:37,730
whole package in all the common ways to
use it so it's it's you know it's not

1740
00:42:37,730 --> 00:42:37,740
use it so it's it's you know it's not
 

1741
00:42:37,740 --> 00:42:41,470
use it so it's it's you know it's not
unreasonable but nobody has done it yet

1742
00:42:41,470 --> 00:42:41,480
unreasonable but nobody has done it yet
 

1743
00:42:41,480 --> 00:42:44,750
unreasonable but nobody has done it yet
all right and then okay so we have this

1744
00:42:44,750 --> 00:42:44,760
all right and then okay so we have this
 

1745
00:42:44,760 --> 00:42:46,520
all right and then okay so we have this
you know very high-level Haskell

1746
00:42:46,520 --> 00:42:46,530
you know very high-level Haskell
 

1747
00:42:46,530 --> 00:42:48,320
you know very high-level Haskell
attributes that we understand as a

1748
00:42:48,320 --> 00:42:48,330
attributes that we understand as a
 

1749
00:42:48,330 --> 00:42:50,210
attributes that we understand as a
builder how you know how that reflects

1750
00:42:50,210 --> 00:42:50,220
builder how you know how that reflects
 

1751
00:42:50,220 --> 00:42:52,760
builder how you know how that reflects
how that affects the building and then

1752
00:42:52,760 --> 00:42:52,770
how that affects the building and then
 

1753
00:42:52,770 --> 00:42:54,560
how that affects the building and then
what we do we define this Combinator is

1754
00:42:54,560 --> 00:42:54,570
what we do we define this Combinator is
 

1755
00:42:54,570 --> 00:42:56,600
what we do we define this Combinator is
basically that you know take the

1756
00:42:56,600 --> 00:42:56,610
basically that you know take the
 

1757
00:42:56,610 --> 00:42:59,210
basically that you know take the
derivation and then override it and may

1758
00:42:59,210 --> 00:42:59,220
derivation and then override it and may
 

1759
00:42:59,220 --> 00:43:01,040
derivation and then override it and may
for example check means run to run the

1760
00:43:01,040 --> 00:43:01,050
for example check means run to run the
 

1761
00:43:01,050 --> 00:43:03,080
for example check means run to run the
tests so we have a do check and don't

1762
00:43:03,080 --> 00:43:03,090
tests so we have a do check and don't
 

1763
00:43:03,090 --> 00:43:05,510
tests so we have a do check and don't
check combinators that means you can

1764
00:43:05,510 --> 00:43:05,520
check combinators that means you can
 

1765
00:43:05,520 --> 00:43:09,050
check combinators that means you can
take so what it means is you call cobalt

1766
00:43:09,050 --> 00:43:09,060
take so what it means is you call cobalt
 

1767
00:43:09,060 --> 00:43:11,690
take so what it means is you call cobalt
unix to generate you know the what it

1768
00:43:11,690 --> 00:43:11,700
unix to generate you know the what it
 

1769
00:43:11,700 --> 00:43:13,880
unix to generate you know the what it
gets from cobalt but then you can say

1770
00:43:13,880 --> 00:43:13,890
gets from cobalt but then you can say
 

1771
00:43:13,890 --> 00:43:16,460
gets from cobalt but then you can say
okay enable the tests or or disable the

1772
00:43:16,460 --> 00:43:16,470
okay enable the tests or or disable the
 

1773
00:43:16,470 --> 00:43:18,620
okay enable the tests or or disable the
tests right so if for example if you

1774
00:43:18,620 --> 00:43:18,630
tests right so if for example if you
 

1775
00:43:18,630 --> 00:43:21,500
tests right so if for example if you
have n CL package you can say don't

1776
00:43:21,500 --> 00:43:21,510
have n CL package you can say don't
 

1777
00:43:21,510 --> 00:43:23,420
have n CL package you can say don't
check and you get an a new package bag

1778
00:43:23,420 --> 00:43:23,430
check and you get an a new package bag
 

1779
00:43:23,430 --> 00:43:25,820
check and you get an a new package bag
that won't run two tests and then you

1780
00:43:25,820 --> 00:43:25,830
that won't run two tests and then you
 

1781
00:43:25,830 --> 00:43:27,800
that won't run two tests and then you
can use this combinators basically to

1782
00:43:27,800 --> 00:43:27,810
can use this combinators basically to
 

1783
00:43:27,810 --> 00:43:30,860
can use this combinators basically to
compose and and tweak all of these

1784
00:43:30,860 --> 00:43:30,870
compose and and tweak all of these
 

1785
00:43:30,870 --> 00:43:36,440
compose and and tweak all of these
attributes here more or less okay any

1786
00:43:36,440 --> 00:43:36,450
attributes here more or less okay any
 

1787
00:43:36,450 --> 00:43:39,400
attributes here more or less okay any
questions so far

1788
00:43:39,400 --> 00:43:39,410

 

1789
00:43:39,410 --> 00:43:44,630

sorry yeah I don't know if you maybe

1790
00:43:44,630 --> 00:43:44,640
sorry yeah I don't know if you maybe
 

1791
00:43:44,640 --> 00:43:46,610
sorry yeah I don't know if you maybe
maybe it's too vague or maybe understand

1792
00:43:46,610 --> 00:43:46,620
maybe it's too vague or maybe understand
 

1793
00:43:46,620 --> 00:43:56,690
maybe it's too vague or maybe understand
everything now it's okay and then okay

1794
00:43:56,690 --> 00:43:56,700
everything now it's okay and then okay
 

1795
00:43:56,700 --> 00:43:59,360
everything now it's okay and then okay
and this is this is where our previous

1796
00:43:59,360 --> 00:43:59,370
and this is this is where our previous
 

1797
00:43:59,370 --> 00:44:05,600
and this is this is where our previous
fixed point comes in where where

1798
00:44:05,600 --> 00:44:05,610
fixed point comes in where where
 

1799
00:44:05,610 --> 00:44:08,120
fixed point comes in where where
basically what we do is if we start down

1800
00:44:08,120 --> 00:44:08,130
basically what we do is if we start down
 

1801
00:44:08,130 --> 00:44:11,540
basically what we do is if we start down
here these these this is that this is a

1802
00:44:11,540 --> 00:44:11,550
here these these this is that this is a
 

1803
00:44:11,550 --> 00:44:14,240
here these these this is that this is a
hackage attribute set of all the

1804
00:44:14,240 --> 00:44:14,250
hackage attribute set of all the
 

1805
00:44:14,250 --> 00:44:17,480
hackage attribute set of all the
packages and then we extend this with

1806
00:44:17,480 --> 00:44:17,490
packages and then we extend this with
 

1807
00:44:17,490 --> 00:44:20,510
packages and then we extend this with
Nick specific configuration and with

1808
00:44:20,510 --> 00:44:20,520
Nick specific configuration and with
 

1809
00:44:20,520 --> 00:44:22,340
Nick specific configuration and with
common configuration so the difference

1810
00:44:22,340 --> 00:44:22,350
common configuration so the difference
 

1811
00:44:22,350 --> 00:44:25,370
common configuration so the difference
is this adds the system libraries this

1812
00:44:25,370 --> 00:44:25,380
is this adds the system libraries this
 

1813
00:44:25,380 --> 00:44:28,040
is this adds the system libraries this
overrides some of the versions that you

1814
00:44:28,040 --> 00:44:28,050
overrides some of the versions that you
 

1815
00:44:28,050 --> 00:44:29,750
overrides some of the versions that you
know depend on what the versions are in

1816
00:44:29,750 --> 00:44:29,760
know depend on what the versions are in
 

1817
00:44:29,760 --> 00:44:31,970
know depend on what the versions are in
hackage and then we have a compiler

1818
00:44:31,970 --> 00:44:31,980
hackage and then we have a compiler
 

1819
00:44:31,980 --> 00:44:35,000
hackage and then we have a compiler
specific on thing like itself coffee I

1820
00:44:35,000 --> 00:44:35,010
specific on thing like itself coffee I
 

1821
00:44:35,010 --> 00:44:36,560
specific on thing like itself coffee I
have no idea what it is and and they're

1822
00:44:36,560 --> 00:44:36,570
have no idea what it is and and they're
 

1823
00:44:36,570 --> 00:44:38,600
have no idea what it is and and they're
all rights this is like your other

1824
00:44:38,600 --> 00:44:38,610
all rights this is like your other
 

1825
00:44:38,610 --> 00:44:41,030
all rights this is like your other
rights that you want to apply so what

1826
00:44:41,030 --> 00:44:41,040
rights that you want to apply so what
 

1827
00:44:41,040 --> 00:44:43,340
rights that you want to apply so what
this does it uses a fixed point and then

1828
00:44:43,340 --> 00:44:43,350
this does it uses a fixed point and then
 

1829
00:44:43,350 --> 00:44:45,620
this does it uses a fixed point and then
it uses you know it basically it's kind

1830
00:44:45,620 --> 00:44:45,630
it uses you know it basically it's kind
 

1831
00:44:45,630 --> 00:44:47,660
it uses you know it basically it's kind
of like lenses you you take the original

1832
00:44:47,660 --> 00:44:47,670
of like lenses you you take the original
 

1833
00:44:47,670 --> 00:44:50,120
of like lenses you you take the original
packet set you apply a bunch of other

1834
00:44:50,120 --> 00:44:50,130
packet set you apply a bunch of other
 

1835
00:44:50,130 --> 00:44:53,280
packet set you apply a bunch of other
rights and and you go on and on and on

1836
00:44:53,280 --> 00:44:53,290
rights and and you go on and on and on
 

1837
00:44:53,290 --> 00:44:56,220
rights and and you go on and on and on
and and the way it works is you have two

1838
00:44:56,220 --> 00:44:56,230
and and the way it works is you have two
 

1839
00:44:56,230 --> 00:45:00,210
and and the way it works is you have two
two inputs one itself and super so super

1840
00:45:00,210 --> 00:45:00,220
two inputs one itself and super so super
 

1841
00:45:00,220 --> 00:45:02,430
two inputs one itself and super so super
super is for example in Nick's

1842
00:45:02,430 --> 00:45:02,440
super is for example in Nick's
 

1843
00:45:02,440 --> 00:45:04,710
super is for example in Nick's
configuration super is Haskell packages

1844
00:45:04,710 --> 00:45:04,720
configuration super is Haskell packages
 

1845
00:45:04,720 --> 00:45:06,660
configuration super is Haskell packages
and self is Nick's configuration itself

1846
00:45:06,660 --> 00:45:06,670
and self is Nick's configuration itself
 

1847
00:45:06,670 --> 00:45:09,120
and self is Nick's configuration itself
so it gets to its own return value as an

1848
00:45:09,120 --> 00:45:09,130
so it gets to its own return value as an
 

1849
00:45:09,130 --> 00:45:12,180
so it gets to its own return value as an
input so you can either for example if

1850
00:45:12,180 --> 00:45:12,190
input so you can either for example if
 

1851
00:45:12,190 --> 00:45:13,860
input so you can either for example if
you all write something you can say like

1852
00:45:13,860 --> 00:45:13,870
you all write something you can say like
 

1853
00:45:13,870 --> 00:45:16,620
you all write something you can say like
take the the package from super or you

1854
00:45:16,620 --> 00:45:16,630
take the the package from super or you
 

1855
00:45:16,630 --> 00:45:18,900
take the the package from super or you
can take the package from from our own

1856
00:45:18,900 --> 00:45:18,910
can take the package from from our own
 

1857
00:45:18,910 --> 00:45:23,640
can take the package from from our own
attribute set that we changed yeah

1858
00:45:23,640 --> 00:45:23,650
attribute set that we changed yeah
 

1859
00:45:23,650 --> 00:45:25,950
attribute set that we changed yeah
that's this this file is a bit

1860
00:45:25,950 --> 00:45:25,960
that's this this file is a bit
 

1861
00:45:25,960 --> 00:45:27,690
that's this this file is a bit
simplified but that's basically what the

1862
00:45:27,690 --> 00:45:27,700
simplified but that's basically what the
 

1863
00:45:27,700 --> 00:45:30,540
simplified but that's basically what the
infrastructure in in Haskell does and

1864
00:45:30,540 --> 00:45:30,550
infrastructure in in Haskell does and
 

1865
00:45:30,550 --> 00:45:34,760
infrastructure in in Haskell does and
and then you know it's all SEC together

1866
00:45:34,760 --> 00:45:34,770
and then you know it's all SEC together
 

1867
00:45:34,770 --> 00:45:51,120
and then you know it's all SEC together
any questions about this yeah

1868
00:45:51,120 --> 00:45:51,130

 

1869
00:45:51,130 --> 00:45:53,770

yeah it's basically two Landers so you

1870
00:45:53,770 --> 00:45:53,780
yeah it's basically two Landers so you
 

1871
00:45:53,780 --> 00:45:56,200
yeah it's basically two Landers so you
can you know do currying and then you

1872
00:45:56,200 --> 00:45:56,210
can you know do currying and then you
 

1873
00:45:56,210 --> 00:46:00,760
can you know do currying and then you
know it's to lambda so it passes passes

1874
00:46:00,760 --> 00:46:00,770
know it's to lambda so it passes passes
 

1875
00:46:00,770 --> 00:46:03,490
know it's to lambda so it passes passes
that in I mean this make extended

1876
00:46:03,490 --> 00:46:03,500
that in I mean this make extended
 

1877
00:46:03,500 --> 00:46:05,620
that in I mean this make extended
extensible and extends is kind of like

1878
00:46:05,620 --> 00:46:05,630
extensible and extends is kind of like
 

1879
00:46:05,630 --> 00:46:07,660
extensible and extends is kind of like
the what uses the fixed point in to pass

1880
00:46:07,660 --> 00:46:07,670
the what uses the fixed point in to pass
 

1881
00:46:07,670 --> 00:46:10,510
the what uses the fixed point in to pass
in the preview set and then the set

1882
00:46:10,510 --> 00:46:10,520
in the preview set and then the set
 

1883
00:46:10,520 --> 00:46:16,540
in the preview set and then the set
itself of through a fixed point any

1884
00:46:16,540 --> 00:46:16,550
itself of through a fixed point any
 

1885
00:46:16,550 --> 00:46:20,580
itself of through a fixed point any
other questions

1886
00:46:20,580 --> 00:46:20,590

 

1887
00:46:20,590 --> 00:46:22,710

and then you know this is that at the

1888
00:46:22,710 --> 00:46:22,720
and then you know this is that at the
 

1889
00:46:22,720 --> 00:46:24,690
and then you know this is that at the
end how you would use all of this what

1890
00:46:24,690 --> 00:46:24,700
end how you would use all of this what
 

1891
00:46:24,700 --> 00:46:28,530
end how you would use all of this what
we covered so far is you say oh I want

1892
00:46:28,530 --> 00:46:28,540
we covered so far is you say oh I want
 

1893
00:46:28,540 --> 00:46:31,020
we covered so far is you say oh I want
the Haskell packages with compiler eight

1894
00:46:31,020 --> 00:46:31,030
the Haskell packages with compiler eight
 

1895
00:46:31,030 --> 00:46:33,390
the Haskell packages with compiler eight
point zero point two so for every we

1896
00:46:33,390 --> 00:46:33,400
point zero point two so for every we
 

1897
00:46:33,400 --> 00:46:35,520
point zero point two so for every we
take the hackage and then we pass the

1898
00:46:35,520 --> 00:46:35,530
take the hackage and then we pass the
 

1899
00:46:35,530 --> 00:46:37,620
take the hackage and then we pass the
compiler in and we create a new package

1900
00:46:37,620 --> 00:46:37,630
compiler in and we create a new package
 

1901
00:46:37,630 --> 00:46:38,190
compiler in and we create a new package
set

1902
00:46:38,190 --> 00:46:38,200
set
 

1903
00:46:38,200 --> 00:46:40,920
set
so for each compiler we do that and you

1904
00:46:40,920 --> 00:46:40,930
so for each compiler we do that and you
 

1905
00:46:40,930 --> 00:46:42,870
so for each compiler we do that and you
can get this package set by basically

1906
00:46:42,870 --> 00:46:42,880
can get this package set by basically
 

1907
00:46:42,880 --> 00:46:44,870
can get this package set by basically
saying packages dot and compiler

1908
00:46:44,870 --> 00:46:44,880
saying packages dot and compiler
 

1909
00:46:44,880 --> 00:46:47,760
saying packages dot and compiler
including you know jtj s or whatever and

1910
00:46:47,760 --> 00:46:47,770
including you know jtj s or whatever and
 

1911
00:46:47,770 --> 00:46:51,000
including you know jtj s or whatever and
then you override this set and you say

1912
00:46:51,000 --> 00:46:51,010
then you override this set and you say
 

1913
00:46:51,010 --> 00:46:52,800
then you override this set and you say
overrides and then now you have the

1914
00:46:52,800 --> 00:46:52,810
overrides and then now you have the
 

1915
00:46:52,810 --> 00:46:54,690
overrides and then now you have the
access to the to the whole thing and you

1916
00:46:54,690 --> 00:46:54,700
access to the to the whole thing and you
 

1917
00:46:54,700 --> 00:46:58,770
access to the to the whole thing and you
can say for example okay in my in my

1918
00:46:58,770 --> 00:46:58,780
can say for example okay in my in my
 

1919
00:46:58,780 --> 00:47:00,870
can say for example okay in my in my
attribute set that I'm interested in I

1920
00:47:00,870 --> 00:47:00,880
attribute set that I'm interested in I
 

1921
00:47:00,880 --> 00:47:03,090
attribute set that I'm interested in I
want to build stack but in that

1922
00:47:03,090 --> 00:47:03,100
want to build stack but in that
 

1923
00:47:03,100 --> 00:47:05,850
want to build stack but in that
dependency graph I want to take the MTL

1924
00:47:05,850 --> 00:47:05,860
dependency graph I want to take the MTL
 

1925
00:47:05,860 --> 00:47:07,650
dependency graph I want to take the MTL
but don't build you know don't be able

1926
00:47:07,650 --> 00:47:07,660
but don't build you know don't be able
 

1927
00:47:07,660 --> 00:47:09,510
but don't build you know don't be able
to execute the tests for example and so

1928
00:47:09,510 --> 00:47:09,520
to execute the tests for example and so
 

1929
00:47:09,520 --> 00:47:12,540
to execute the tests for example and so
on and then and and here comes all the

1930
00:47:12,540 --> 00:47:12,550
on and then and and here comes all the
 

1931
00:47:12,550 --> 00:47:16,050
on and then and and here comes all the
precision where you know we override and

1932
00:47:16,050 --> 00:47:16,060
precision where you know we override and
 

1933
00:47:16,060 --> 00:47:22,840
precision where you know we override and
our package set

1934
00:47:22,840 --> 00:47:22,850

 

1935
00:47:22,850 --> 00:47:25,210

I see subway-tile face some faces are

1936
00:47:25,210 --> 00:47:25,220
I see subway-tile face some faces are
 

1937
00:47:25,220 --> 00:47:27,910
I see subway-tile face some faces are
confused some faces are like so I guess

1938
00:47:27,910 --> 00:47:27,920
confused some faces are like so I guess
 

1939
00:47:27,920 --> 00:47:29,890
confused some faces are like so I guess
it color correlates with experience of

1940
00:47:29,890 --> 00:47:29,900
it color correlates with experience of
 

1941
00:47:29,900 --> 00:47:30,280
it color correlates with experience of
niché's

1942
00:47:30,280 --> 00:47:30,290
niché's
 

1943
00:47:30,290 --> 00:47:33,130
niché's
we would have to do like a three-day

1944
00:47:33,130 --> 00:47:33,140
we would have to do like a three-day
 

1945
00:47:33,140 --> 00:47:37,600
we would have to do like a three-day
workshop ready to go but you know it

1946
00:47:37,600 --> 00:47:37,610
workshop ready to go but you know it
 

1947
00:47:37,610 --> 00:47:39,730
workshop ready to go but you know it
yeah it takes a tight the major problem

1948
00:47:39,730 --> 00:47:39,740
yeah it takes a tight the major problem
 

1949
00:47:39,740 --> 00:47:41,560
yeah it takes a tight the major problem
with Nick's is it does so much and it

1950
00:47:41,560 --> 00:47:41,570
with Nick's is it does so much and it
 

1951
00:47:41,570 --> 00:47:43,060
with Nick's is it does so much and it
covers so many things that it's really

1952
00:47:43,060 --> 00:47:43,070
covers so many things that it's really
 

1953
00:47:43,070 --> 00:47:47,290
covers so many things that it's really
hard and it does it all with attribute

1954
00:47:47,290 --> 00:47:47,300
hard and it does it all with attribute
 

1955
00:47:47,300 --> 00:47:50,770
hard and it does it all with attribute
sets yes and and and and the functions

1956
00:47:50,770 --> 00:47:50,780
sets yes and and and and the functions
 

1957
00:47:50,780 --> 00:47:52,480
sets yes and and and and the functions
that operate on the attribute sets are

1958
00:47:52,480 --> 00:47:52,490
that operate on the attribute sets are
 

1959
00:47:52,490 --> 00:47:54,880
that operate on the attribute sets are
you know not as precise as you would you

1960
00:47:54,880 --> 00:47:54,890
you know not as precise as you would you
 

1961
00:47:54,890 --> 00:47:56,230
you know not as precise as you would you
know you have them in Haskell for

1962
00:47:56,230 --> 00:47:56,240
know you have them in Haskell for
 

1963
00:47:56,240 --> 00:47:59,160
know you have them in Haskell for
example right so there's there's legacy

1964
00:47:59,160 --> 00:47:59,170
example right so there's there's legacy
 

1965
00:47:59,170 --> 00:48:01,780
example right so there's there's legacy
okay so now I want to cover a bit how we

1966
00:48:01,780 --> 00:48:01,790
okay so now I want to cover a bit how we
 

1967
00:48:01,790 --> 00:48:07,110
okay so now I want to cover a bit how we
use NYX in yhk just on a very high level

1968
00:48:07,110 --> 00:48:07,120

 

1969
00:48:07,120 --> 00:48:09,670

one of the first things that when you

1970
00:48:09,670 --> 00:48:09,680
one of the first things that when you
 

1971
00:48:09,680 --> 00:48:13,030
one of the first things that when you
you start using Nyx's it it uses this

1972
00:48:13,030 --> 00:48:13,040
you start using Nyx's it it uses this
 

1973
00:48:13,040 --> 00:48:15,790
you start using Nyx's it it uses this
you know lesson and and more science

1974
00:48:15,790 --> 00:48:15,800
you know lesson and and more science
 

1975
00:48:15,800 --> 00:48:18,640
you know lesson and and more science
which basically means the take take this

1976
00:48:18,640 --> 00:48:18,650
which basically means the take take this
 

1977
00:48:18,650 --> 00:48:21,340
which basically means the take take this
NYX packages from the search path which

1978
00:48:21,340 --> 00:48:21,350
NYX packages from the search path which
 

1979
00:48:21,350 --> 00:48:23,860
NYX packages from the search path which
means this NYX path and Bosch

1980
00:48:23,860 --> 00:48:23,870
means this NYX path and Bosch
 

1981
00:48:23,870 --> 00:48:25,840
means this NYX path and Bosch
environment variable and this is you

1982
00:48:25,840 --> 00:48:25,850
environment variable and this is you
 

1983
00:48:25,850 --> 00:48:28,510
environment variable and this is you
know this is a pattern that goes through

1984
00:48:28,510 --> 00:48:28,520
know this is a pattern that goes through
 

1985
00:48:28,520 --> 00:48:30,760
know this is a pattern that goes through
the language packaging I don't know who

1986
00:48:30,760 --> 00:48:30,770
the language packaging I don't know who
 

1987
00:48:30,770 --> 00:48:33,310
the language packaging I don't know who
invented it but it goes on and on and

1988
00:48:33,310 --> 00:48:33,320
invented it but it goes on and on and
 

1989
00:48:33,320 --> 00:48:35,680
invented it but it goes on and on and
it's it's this again this global thing

1990
00:48:35,680 --> 00:48:35,690
it's it's this again this global thing
 

1991
00:48:35,690 --> 00:48:37,780
it's it's this again this global thing
of the environment that you know it's

1992
00:48:37,780 --> 00:48:37,790
of the environment that you know it's
 

1993
00:48:37,790 --> 00:48:39,190
of the environment that you know it's
really hard to figure out what's going

1994
00:48:39,190 --> 00:48:39,200
really hard to figure out what's going
 

1995
00:48:39,200 --> 00:48:42,930
really hard to figure out what's going
on and I can make sweet we have this

1996
00:48:42,930 --> 00:48:42,940
on and I can make sweet we have this
 

1997
00:48:42,940 --> 00:48:45,550
on and I can make sweet we have this
channels that basically then provide any

1998
00:48:45,550 --> 00:48:45,560
channels that basically then provide any
 

1999
00:48:45,560 --> 00:48:48,070
channels that basically then provide any
spectators and you update and them and

2000
00:48:48,070 --> 00:48:48,080
spectators and you update and them and
 

2001
00:48:48,080 --> 00:48:50,620
spectators and you update and them and
and you know it's all a bit stateful so

2002
00:48:50,620 --> 00:48:50,630
and you know it's all a bit stateful so
 

2003
00:48:50,630 --> 00:48:53,070
and you know it's all a bit stateful so
I recommend usually not use that at all

2004
00:48:53,070 --> 00:48:53,080
I recommend usually not use that at all
 

2005
00:48:53,080 --> 00:48:56,320
I recommend usually not use that at all
what we do in our HK and actually this

2006
00:48:56,320 --> 00:48:56,330
what we do in our HK and actually this
 

2007
00:48:56,330 --> 00:48:59,110
what we do in our HK and actually this
was this was a joint effort by a couple

2008
00:48:59,110 --> 00:48:59,120
was this was a joint effort by a couple
 

2009
00:48:59,120 --> 00:49:03,600
was this was a joint effort by a couple
of people to come up with this idea is

2010
00:49:03,600 --> 00:49:03,610
of people to come up with this idea is
 

2011
00:49:03,610 --> 00:49:07,360
of people to come up with this idea is
we have this NYX packages - source like

2012
00:49:07,360 --> 00:49:07,370
we have this NYX packages - source like
 

2013
00:49:07,370 --> 00:49:09,520
we have this NYX packages - source like
JSON which you know pins down expect

2014
00:49:09,520 --> 00:49:09,530
JSON which you know pins down expect
 

2015
00:49:09,530 --> 00:49:12,490
JSON which you know pins down expect
adjust your very commit and then you you

2016
00:49:12,490 --> 00:49:12,500
adjust your very commit and then you you
 

2017
00:49:12,500 --> 00:49:14,560
adjust your very commit and then you you
import this file that's present in all

2018
00:49:14,560 --> 00:49:14,570
import this file that's present in all
 

2019
00:49:14,570 --> 00:49:18,100
import this file that's present in all
repositories that basically uses a

2020
00:49:18,100 --> 00:49:18,110
repositories that basically uses a
 

2021
00:49:18,110 --> 00:49:21,010
repositories that basically uses a
derivation to import the NICS packages

2022
00:49:21,010 --> 00:49:21,020
derivation to import the NICS packages
 

2023
00:49:21,020 --> 00:49:23,050
derivation to import the NICS packages
and then you import that and you then

2024
00:49:23,050 --> 00:49:23,060
and then you import that and you then
 

2025
00:49:23,060 --> 00:49:24,840
and then you import that and you then
you have the next packages to be used

2026
00:49:24,840 --> 00:49:24,850
you have the next packages to be used
 

2027
00:49:24,850 --> 00:49:26,950
you have the next packages to be used
from their own so there is no this

2028
00:49:26,950 --> 00:49:26,960
from their own so there is no this
 

2029
00:49:26,960 --> 00:49:29,530
from their own so there is no this
global thing but actually what is used

2030
00:49:29,530 --> 00:49:29,540
global thing but actually what is used
 

2031
00:49:29,540 --> 00:49:31,420
global thing but actually what is used
is part of the git repository itself

2032
00:49:31,420 --> 00:49:31,430
is part of the git repository itself
 

2033
00:49:31,430 --> 00:49:35,599
is part of the git repository itself
pinned down to the committee

2034
00:49:35,599 --> 00:49:35,609

 

2035
00:49:35,609 --> 00:49:38,970

yeah the how its implemented it's I

2036
00:49:38,970 --> 00:49:38,980
yeah the how its implemented it's I
 

2037
00:49:38,980 --> 00:49:40,800
yeah the how its implemented it's I
won't cover it you can like look it up

2038
00:49:40,800 --> 00:49:40,810
won't cover it you can like look it up
 

2039
00:49:40,810 --> 00:49:43,920
won't cover it you can like look it up
but it's it's definitely it's it has

2040
00:49:43,920 --> 00:49:43,930
but it's it's definitely it's it has
 

2041
00:49:43,930 --> 00:49:46,829
but it's it's definitely it's it has
improved our you know results a lot in

2042
00:49:46,829 --> 00:49:46,839
improved our you know results a lot in
 

2043
00:49:46,839 --> 00:49:49,260
improved our you know results a lot in
terms of determinism compared to this

2044
00:49:49,260 --> 00:49:49,270
terms of determinism compared to this
 

2045
00:49:49,270 --> 00:49:51,120
terms of determinism compared to this
because like when you have a CI you have

2046
00:49:51,120 --> 00:49:51,130
because like when you have a CI you have
 

2047
00:49:51,130 --> 00:49:53,130
because like when you have a CI you have
to be careful that nicks path has the

2048
00:49:53,130 --> 00:49:53,140
to be careful that nicks path has the
 

2049
00:49:53,140 --> 00:49:55,440
to be careful that nicks path has the
same packages as you locally and so on

2050
00:49:55,440 --> 00:49:55,450
same packages as you locally and so on
 

2051
00:49:55,450 --> 00:49:57,200
same packages as you locally and so on
and so on so on so it's kind of

2052
00:49:57,200 --> 00:49:57,210
and so on so on so it's kind of
 

2053
00:49:57,210 --> 00:50:00,630
and so on so on so it's kind of
cumbersome then the second thing we did

2054
00:50:00,630 --> 00:50:00,640
cumbersome then the second thing we did
 

2055
00:50:00,640 --> 00:50:03,420
cumbersome then the second thing we did
we wrote this - cool tool called sec

2056
00:50:03,420 --> 00:50:03,430
we wrote this - cool tool called sec
 

2057
00:50:03,430 --> 00:50:06,390
we wrote this - cool tool called sec
tunings so what it does it basically

2058
00:50:06,390 --> 00:50:06,400
tunings so what it does it basically
 

2059
00:50:06,400 --> 00:50:09,599
tunings so what it does it basically
uses inside inside infrastructure of

2060
00:50:09,599 --> 00:50:09,609
uses inside inside infrastructure of
 

2061
00:50:09,609 --> 00:50:11,819
uses inside inside infrastructure of
stack to build the whole package set

2062
00:50:11,819 --> 00:50:11,829
stack to build the whole package set
 

2063
00:50:11,829 --> 00:50:14,160
stack to build the whole package set
that stack would basically build you

2064
00:50:14,160 --> 00:50:14,170
that stack would basically build you
 

2065
00:50:14,170 --> 00:50:16,020
that stack would basically build you
know either it comes from Hackett's or

2066
00:50:16,020 --> 00:50:16,030
know either it comes from Hackett's or
 

2067
00:50:16,030 --> 00:50:17,880
know either it comes from Hackett's or
it comes from a local folder or all it

2068
00:50:17,880 --> 00:50:17,890
it comes from a local folder or all it
 

2069
00:50:17,890 --> 00:50:20,460
it comes from a local folder or all it
comes from grid and then it calls cobalt

2070
00:50:20,460 --> 00:50:20,470
comes from grid and then it calls cobalt
 

2071
00:50:20,470 --> 00:50:22,349
comes from grid and then it calls cobalt
or nix on all of those and b builds our

2072
00:50:22,349 --> 00:50:22,359
or nix on all of those and b builds our
 

2073
00:50:22,359 --> 00:50:24,720
or nix on all of those and b builds our
own package set basically and and why

2074
00:50:24,720 --> 00:50:24,730
own package set basically and and why
 

2075
00:50:24,730 --> 00:50:26,760
own package set basically and and why
don't why do we want that we want the

2076
00:50:26,760 --> 00:50:26,770
don't why do we want that we want the
 

2077
00:50:26,770 --> 00:50:29,010
don't why do we want that we want the
developers to use the same packet set as

2078
00:50:29,010 --> 00:50:29,020
developers to use the same packet set as
 

2079
00:50:29,020 --> 00:50:30,660
developers to use the same packet set as
they did use in production so we at

2080
00:50:30,660 --> 00:50:30,670
they did use in production so we at
 

2081
00:50:30,670 --> 00:50:33,780
they did use in production so we at
least have some you know guarantee that

2082
00:50:33,780 --> 00:50:33,790
least have some you know guarantee that
 

2083
00:50:33,790 --> 00:50:35,849
least have some you know guarantee that
this was tested and used right we don't

2084
00:50:35,849 --> 00:50:35,859
this was tested and used right we don't
 

2085
00:50:35,859 --> 00:50:38,099
this was tested and used right we don't
want that the deployments just use a

2086
00:50:38,099 --> 00:50:38,109
want that the deployments just use a
 

2087
00:50:38,109 --> 00:50:40,200
want that the deployments just use a
completely different set and and and

2088
00:50:40,200 --> 00:50:40,210
completely different set and and and
 

2089
00:50:40,210 --> 00:50:42,059
completely different set and and and
then we start finding our box and this

2090
00:50:42,059 --> 00:50:42,069
then we start finding our box and this
 

2091
00:50:42,069 --> 00:50:44,430
then we start finding our box and this
is the the packet in the famous packet

2092
00:50:44,430 --> 00:50:44,440
is the the packet in the famous packet
 

2093
00:50:44,440 --> 00:50:47,460
is the the packet in the famous packet
generator power that you have to use -

2094
00:50:47,460 --> 00:50:47,470
generator power that you have to use -
 

2095
00:50:47,470 --> 00:50:49,530
generator power that you have to use -
and this is a bridge so we want

2096
00:50:49,530 --> 00:50:49,540
and this is a bridge so we want
 

2097
00:50:49,540 --> 00:50:52,079
and this is a bridge so we want
developers to use tag by deployments to

2098
00:50:52,079 --> 00:50:52,089
developers to use tag by deployments to
 

2099
00:50:52,089 --> 00:50:55,349
developers to use tag by deployments to
use NYX and and this is our bridge

2100
00:50:55,349 --> 00:50:55,359
use NYX and and this is our bridge
 

2101
00:50:55,359 --> 00:50:57,030
use NYX and and this is our bridge
between the development and the

2102
00:50:57,030 --> 00:50:57,040
between the development and the
 

2103
00:50:57,040 --> 00:51:00,800
between the development and the
deployment world it was recently

2104
00:51:00,800 --> 00:51:00,810
deployment world it was recently
 

2105
00:51:00,810 --> 00:51:03,930
deployment world it was recently
rewritten and it's you know quite fast

2106
00:51:03,930 --> 00:51:03,940
rewritten and it's you know quite fast
 

2107
00:51:03,940 --> 00:51:05,940
rewritten and it's you know quite fast
now it supports Mac OS it doesn't have

2108
00:51:05,940 --> 00:51:05,950
now it supports Mac OS it doesn't have
 

2109
00:51:05,950 --> 00:51:08,819
now it supports Mac OS it doesn't have
this cabal revision non-determinism that

2110
00:51:08,819 --> 00:51:08,829
this cabal revision non-determinism that
 

2111
00:51:08,829 --> 00:51:11,160
this cabal revision non-determinism that
you were a lot of you were hitting and

2112
00:51:11,160 --> 00:51:11,170
you were a lot of you were hitting and
 

2113
00:51:11,170 --> 00:51:14,880
you were a lot of you were hitting and
so on one of the one of the things we

2114
00:51:14,880 --> 00:51:14,890
so on one of the one of the things we
 

2115
00:51:14,890 --> 00:51:16,380
so on one of the one of the things we
want to improve is to to be able to

2116
00:51:16,380 --> 00:51:16,390
want to improve is to to be able to
 

2117
00:51:16,390 --> 00:51:17,790
want to improve is to to be able to
override a compiler right now it's

2118
00:51:17,790 --> 00:51:17,800
override a compiler right now it's
 

2119
00:51:17,800 --> 00:51:19,740
override a compiler right now it's
hard-coded to eight point zero point two

2120
00:51:19,740 --> 00:51:19,750
hard-coded to eight point zero point two
 

2121
00:51:19,750 --> 00:51:25,620
hard-coded to eight point zero point two
but you know getting there and then yeah

2122
00:51:25,620 --> 00:51:25,630
but you know getting there and then yeah
 

2123
00:51:25,630 --> 00:51:28,020
but you know getting there and then yeah
then Carano itself provides a package

2124
00:51:28,020 --> 00:51:28,030
then Carano itself provides a package
 

2125
00:51:28,030 --> 00:51:30,540
then Carano itself provides a package
set again which is directly translates

2126
00:51:30,540 --> 00:51:30,550
set again which is directly translates
 

2127
00:51:30,550 --> 00:51:33,089
set again which is directly translates
from what stack uses and you can say Nix

2128
00:51:33,089 --> 00:51:33,099
from what stack uses and you can say Nix
 

2129
00:51:33,099 --> 00:51:34,950
from what stack uses and you can say Nix
build card on or sell and you would get

2130
00:51:34,950 --> 00:51:34,960
build card on or sell and you would get
 

2131
00:51:34,960 --> 00:51:36,809
build card on or sell and you would get
you know the Cardano cell package and so

2132
00:51:36,809 --> 00:51:36,819
you know the Cardano cell package and so
 

2133
00:51:36,819 --> 00:51:40,950
you know the Cardano cell package and so
on this is is the you would run this

2134
00:51:40,950 --> 00:51:40,960
on this is is the you would run this
 

2135
00:51:40,960 --> 00:51:44,880
on this is is the you would run this
inside a card on OSL git repository and

2136
00:51:44,880 --> 00:51:44,890
inside a card on OSL git repository and
 

2137
00:51:44,890 --> 00:51:46,920
inside a card on OSL git repository and
for example we wrote the connect scripts

2138
00:51:46,920 --> 00:51:46,930
for example we wrote the connect scripts
 

2139
00:51:46,930 --> 00:51:49,459
for example we wrote the connect scripts
so now you can actually

2140
00:51:49,459 --> 00:51:49,469
so now you can actually
 

2141
00:51:49,469 --> 00:51:51,989
so now you can actually
build a full node and and this would

2142
00:51:51,989 --> 00:51:51,999
build a full node and and this would
 

2143
00:51:51,999 --> 00:51:53,999
build a full node and and this would
basically build a best script that would

2144
00:51:53,999 --> 00:51:54,009
basically build a best script that would
 

2145
00:51:54,009 --> 00:51:56,399
basically build a best script that would
run the note and you just run you know

2146
00:51:56,399 --> 00:51:56,409
run the note and you just run you know
 

2147
00:51:56,409 --> 00:51:58,169
run the note and you just run you know
for example if you want to connect to

2148
00:51:58,169 --> 00:51:58,179
for example if you want to connect to
 

2149
00:51:58,179 --> 00:52:00,479
for example if you want to connect to
maintenance you say the first line if

2150
00:52:00,479 --> 00:52:00,489
maintenance you say the first line if
 

2151
00:52:00,489 --> 00:52:02,370
maintenance you say the first line if
you want to connect to staging the

2152
00:52:02,370 --> 00:52:02,380
you want to connect to staging the
 

2153
00:52:02,380 --> 00:52:04,140
you want to connect to staging the
second line and and so on and so on and

2154
00:52:04,140 --> 00:52:04,150
second line and and so on and so on and
 

2155
00:52:04,150 --> 00:52:06,599
second line and and so on and so on and
there's also we have this top-level

2156
00:52:06,599 --> 00:52:06,609
there's also we have this top-level
 

2157
00:52:06,609 --> 00:52:08,669
there's also we have this top-level
attributes area where you can like you

2158
00:52:08,669 --> 00:52:08,679
attributes area where you can like you
 

2159
00:52:08,679 --> 00:52:12,169
attributes area where you can like you
know override for example you know

2160
00:52:12,169 --> 00:52:12,179
know override for example you know
 

2161
00:52:12,179 --> 00:52:14,609
know override for example you know
topology file for example for people who

2162
00:52:14,609 --> 00:52:14,619
topology file for example for people who
 

2163
00:52:14,619 --> 00:52:16,169
topology file for example for people who
want to use different apology file and

2164
00:52:16,169 --> 00:52:16,179
want to use different apology file and
 

2165
00:52:16,179 --> 00:52:16,759
want to use different apology file and
so on

2166
00:52:16,759 --> 00:52:16,769
so on
 

2167
00:52:16,769 --> 00:52:19,709
so on
so we're now able to build different

2168
00:52:19,709 --> 00:52:19,719
so we're now able to build different
 

2169
00:52:19,719 --> 00:52:21,779
so we're now able to build different
kind of best scripts and and the next

2170
00:52:21,779 --> 00:52:21,789
kind of best scripts and and the next
 

2171
00:52:21,789 --> 00:52:23,309
kind of best scripts and and the next
step is going to be testing them right

2172
00:52:23,309 --> 00:52:23,319
step is going to be testing them right
 

2173
00:52:23,319 --> 00:52:26,039
step is going to be testing them right
we'll take a virtual machine will will

2174
00:52:26,039 --> 00:52:26,049
we'll take a virtual machine will will
 

2175
00:52:26,049 --> 00:52:28,859
we'll take a virtual machine will will
run run its run all of those inside and

2176
00:52:28,859 --> 00:52:28,869
run run its run all of those inside and
 

2177
00:52:28,869 --> 00:52:33,929
run run its run all of those inside and
make sure that they all work right and

2178
00:52:33,929 --> 00:52:33,939
make sure that they all work right and
 

2179
00:52:33,939 --> 00:52:36,269
make sure that they all work right and
you know you can also use docker we also

2180
00:52:36,269 --> 00:52:36,279
you know you can also use docker we also
 

2181
00:52:36,279 --> 00:52:40,049
you know you can also use docker we also
have a doctor function and you can use

2182
00:52:40,049 --> 00:52:40,059
have a doctor function and you can use
 

2183
00:52:40,059 --> 00:52:41,729
have a doctor function and you can use
basic basically it uses the connect

2184
00:52:41,729 --> 00:52:41,739
basic basically it uses the connect
 

2185
00:52:41,739 --> 00:52:44,009
basic basically it uses the connect
scripts in the docker it just you know

2186
00:52:44,009 --> 00:52:44,019
scripts in the docker it just you know
 

2187
00:52:44,019 --> 00:52:46,019
scripts in the docker it just you know
provisions the Cardano inside and then

2188
00:52:46,019 --> 00:52:46,029
provisions the Cardano inside and then
 

2189
00:52:46,029 --> 00:52:48,209
provisions the Cardano inside and then
use those connect scripts and this is

2190
00:52:48,209 --> 00:52:48,219
use those connect scripts and this is
 

2191
00:52:48,219 --> 00:52:49,829
use those connect scripts and this is
what whatever what some of the our

2192
00:52:49,829 --> 00:52:49,839
what whatever what some of the our
 

2193
00:52:49,839 --> 00:52:54,109
what whatever what some of the our
partners use to build the docker image

2194
00:52:54,109 --> 00:52:54,119
partners use to build the docker image
 

2195
00:52:54,119 --> 00:52:59,579
partners use to build the docker image
and then and then the one of the

2196
00:52:59,579 --> 00:52:59,589
and then and then the one of the
 

2197
00:52:59,589 --> 00:53:01,169
and then and then the one of the
questions was if I remember it correctly

2198
00:53:01,169 --> 00:53:01,179
questions was if I remember it correctly
 

2199
00:53:01,179 --> 00:53:04,019
questions was if I remember it correctly
what but we would like to cover is how

2200
00:53:04,019 --> 00:53:04,029
what but we would like to cover is how
 

2201
00:53:04,029 --> 00:53:06,479
what but we would like to cover is how
do you you know develop packages UNIX

2202
00:53:06,479 --> 00:53:06,489
do you you know develop packages UNIX
 

2203
00:53:06,489 --> 00:53:08,329
do you you know develop packages UNIX
instead of using stack there is this

2204
00:53:08,329 --> 00:53:08,339
instead of using stack there is this
 

2205
00:53:08,339 --> 00:53:10,289
instead of using stack there is this
attribute on each package called

2206
00:53:10,289 --> 00:53:10,299
attribute on each package called
 

2207
00:53:10,299 --> 00:53:11,969
attribute on each package called
environment and this is what you can

2208
00:53:11,969 --> 00:53:11,979
environment and this is what you can
 

2209
00:53:11,979 --> 00:53:15,390
environment and this is what you can
like enter into so for example if you

2210
00:53:15,390 --> 00:53:15,400
like enter into so for example if you
 

2211
00:53:15,400 --> 00:53:16,859
like enter into so for example if you
want to develop on the wallet you can

2212
00:53:16,859 --> 00:53:16,869
want to develop on the wallet you can
 

2213
00:53:16,869 --> 00:53:19,499
want to develop on the wallet you can
say Nick shell and you would get you

2214
00:53:19,499 --> 00:53:19,509
say Nick shell and you would get you
 

2215
00:53:19,509 --> 00:53:22,319
say Nick shell and you would get you
know basically all the packages that are

2216
00:53:22,319 --> 00:53:22,329
know basically all the packages that are
 

2217
00:53:22,329 --> 00:53:27,809
know basically all the packages that are
passed to building the wallet and if you

2218
00:53:27,809 --> 00:53:27,819
passed to building the wallet and if you
 

2219
00:53:27,819 --> 00:53:29,219
passed to building the wallet and if you
if you if you're going to modify

2220
00:53:29,219 --> 00:53:29,229
if you if you're going to modify
 

2221
00:53:29,229 --> 00:53:31,049
if you if you're going to modify
anything that's not in the wallet but is

2222
00:53:31,049 --> 00:53:31,059
anything that's not in the wallet but is
 

2223
00:53:31,059 --> 00:53:32,819
anything that's not in the wallet but is
a dependency of the wallet then you will

2224
00:53:32,819 --> 00:53:32,829
a dependency of the wallet then you will
 

2225
00:53:32,829 --> 00:53:34,469
a dependency of the wallet then you will
have to re-enter the Nick shell because

2226
00:53:34,469 --> 00:53:34,479
have to re-enter the Nick shell because
 

2227
00:53:34,479 --> 00:53:35,909
have to re-enter the Nick shell because
that's a dependency and you'll have to

2228
00:53:35,909 --> 00:53:35,919
that's a dependency and you'll have to
 

2229
00:53:35,919 --> 00:53:37,829
that's a dependency and you'll have to
rebuild it but if you just work on the

2230
00:53:37,829 --> 00:53:37,839
rebuild it but if you just work on the
 

2231
00:53:37,839 --> 00:53:39,749
rebuild it but if you just work on the
wallet and you know and and what's nice

2232
00:53:39,749 --> 00:53:39,759
wallet and you know and and what's nice
 

2233
00:53:39,759 --> 00:53:41,729
wallet and you know and and what's nice
about this you can switch back and forth

2234
00:53:41,729 --> 00:53:41,739
about this you can switch back and forth
 

2235
00:53:41,739 --> 00:53:43,469
about this you can switch back and forth
between branches like stack would

2236
00:53:43,469 --> 00:53:43,479
between branches like stack would
 

2237
00:53:43,479 --> 00:53:46,289
between branches like stack would
recompile the whole thing here once you

2238
00:53:46,289 --> 00:53:46,299
recompile the whole thing here once you
 

2239
00:53:46,299 --> 00:53:48,659
recompile the whole thing here once you
once you you've build the dependencies

2240
00:53:48,659 --> 00:53:48,669
once you you've build the dependencies
 

2241
00:53:48,669 --> 00:53:50,099
once you you've build the dependencies
once there you run your machine so you

2242
00:53:50,099 --> 00:53:50,109
once there you run your machine so you
 

2243
00:53:50,109 --> 00:53:53,599
once there you run your machine so you
can just go back and forth and

2244
00:53:53,599 --> 00:53:53,609

 

2245
00:53:53,609 --> 00:54:01,259

yeah yeah future work what what we see

2246
00:54:01,259 --> 00:54:01,269
yeah yeah future work what what we see
 

2247
00:54:01,269 --> 00:54:03,809
yeah yeah future work what what we see
in what I see in in diet K what were we

2248
00:54:03,809 --> 00:54:03,819
in what I see in in diet K what were we
 

2249
00:54:03,819 --> 00:54:06,180
in what I see in in diet K what were we
going to focus on one is NICs 1.12 is

2250
00:54:06,180 --> 00:54:06,190
going to focus on one is NICs 1.12 is
 

2251
00:54:06,190 --> 00:54:08,430
going to focus on one is NICs 1.12 is
probably coming out soon that's been

2252
00:54:08,430 --> 00:54:08,440
probably coming out soon that's been
 

2253
00:54:08,440 --> 00:54:11,059
probably coming out soon that's been
going on for the last year so very soon

2254
00:54:11,059 --> 00:54:11,069
going on for the last year so very soon
 

2255
00:54:11,069 --> 00:54:14,160
going on for the last year so very soon
it has a lot of really really nice bug

2256
00:54:14,160 --> 00:54:14,170
it has a lot of really really nice bug
 

2257
00:54:14,170 --> 00:54:16,739
it has a lot of really really nice bug
fixes and and features I won't go into

2258
00:54:16,739 --> 00:54:16,749
fixes and and features I won't go into
 

2259
00:54:16,749 --> 00:54:19,229
fixes and and features I won't go into
that there is a talk by ELQ odo store at

2260
00:54:19,229 --> 00:54:19,239
that there is a talk by ELQ odo store at
 

2261
00:54:19,239 --> 00:54:20,549
that there is a talk by ELQ odo store at
Nick's comes this year that covers

2262
00:54:20,549 --> 00:54:20,559
Nick's comes this year that covers
 

2263
00:54:20,559 --> 00:54:23,699
Nick's comes this year that covers
what's coming so better just watch his

2264
00:54:23,699 --> 00:54:23,709
what's coming so better just watch his
 

2265
00:54:23,709 --> 00:54:27,630
what's coming so better just watch his
talk and four deployments Ria's

2266
00:54:27,630 --> 00:54:27,640
talk and four deployments Ria's
 

2267
00:54:27,640 --> 00:54:29,870
talk and four deployments Ria's
currently mix ups which is kind of like

2268
00:54:29,870 --> 00:54:29,880
currently mix ups which is kind of like
 

2269
00:54:29,880 --> 00:54:33,089
currently mix ups which is kind of like
Nick's OS but with provisioning of the

2270
00:54:33,089 --> 00:54:33,099
Nick's OS but with provisioning of the
 

2271
00:54:33,099 --> 00:54:34,109
Nick's OS but with provisioning of the
cloud services

2272
00:54:34,109 --> 00:54:34,119
cloud services
 

2273
00:54:34,119 --> 00:54:37,949
cloud services
the alternative is terraform terraform

2274
00:54:37,949 --> 00:54:37,959
the alternative is terraform terraform
 

2275
00:54:37,959 --> 00:54:40,499
the alternative is terraform terraform
is is way better when it comes to

2276
00:54:40,499 --> 00:54:40,509
is is way better when it comes to
 

2277
00:54:40,509 --> 00:54:42,120
is is way better when it comes to
provisioning because the community is

2278
00:54:42,120 --> 00:54:42,130
provisioning because the community is
 

2279
00:54:42,130 --> 00:54:43,769
provisioning because the community is
huge and they have a lot of things you

2280
00:54:43,769 --> 00:54:43,779
huge and they have a lot of things you
 

2281
00:54:43,779 --> 00:54:47,729
huge and they have a lot of things you
can provision so there there are now

2282
00:54:47,729 --> 00:54:47,739
can provision so there there are now
 

2283
00:54:47,739 --> 00:54:50,489
can provision so there there are now
different companies exploring how could

2284
00:54:50,489 --> 00:54:50,499
different companies exploring how could
 

2285
00:54:50,499 --> 00:54:52,499
different companies exploring how could
we like breach those two so we would use

2286
00:54:52,499 --> 00:54:52,509
we like breach those two so we would use
 

2287
00:54:52,509 --> 00:54:54,630
we like breach those two so we would use
like Nick's OS for the operating system

2288
00:54:54,630 --> 00:54:54,640
like Nick's OS for the operating system
 

2289
00:54:54,640 --> 00:54:57,229
like Nick's OS for the operating system
but terraform for provisioning part and

2290
00:54:57,229 --> 00:54:57,239
but terraform for provisioning part and
 

2291
00:54:57,239 --> 00:54:59,479
but terraform for provisioning part and
you know and then there is this

2292
00:54:59,479 --> 00:54:59,489
you know and then there is this
 

2293
00:54:59,489 --> 00:55:02,249
you know and then there is this
different ways to do it doll Jason

2294
00:55:02,249 --> 00:55:02,259
different ways to do it doll Jason
 

2295
00:55:02,259 --> 00:55:04,859
different ways to do it doll Jason
techniques and the HDL which is the

2296
00:55:04,859 --> 00:55:04,869
techniques and the HDL which is the
 

2297
00:55:04,869 --> 00:55:07,499
techniques and the HDL which is the
terraform language at the end it's all

2298
00:55:07,499 --> 00:55:07,509
terraform language at the end it's all
 

2299
00:55:07,509 --> 00:55:13,620
terraform language at the end it's all
JSON so yeah you pick your precision one

2300
00:55:13,620 --> 00:55:13,630
JSON so yeah you pick your precision one
 

2301
00:55:13,630 --> 00:55:16,380
JSON so yeah you pick your precision one
of the things is the multiple outputs GC

2302
00:55:16,380 --> 00:55:16,390
of the things is the multiple outputs GC
 

2303
00:55:16,390 --> 00:55:18,150
of the things is the multiple outputs GC
which is like a patch that has been like

2304
00:55:18,150 --> 00:55:18,160
which is like a patch that has been like
 

2305
00:55:18,160 --> 00:55:22,650
which is like a patch that has been like
ongoing together with with guys from

2306
00:55:22,650 --> 00:55:22,660
ongoing together with with guys from
 

2307
00:55:22,660 --> 00:55:25,109
ongoing together with with guys from
tweak we have been trying to get it in

2308
00:55:25,109 --> 00:55:25,119
tweak we have been trying to get it in
 

2309
00:55:25,119 --> 00:55:29,219
tweak we have been trying to get it in
but it's kind of hard I think I think it

2310
00:55:29,219 --> 00:55:29,229
but it's kind of hard I think I think it
 

2311
00:55:29,229 --> 00:55:32,880
but it's kind of hard I think I think it
needs a couple of days more work so what

2312
00:55:32,880 --> 00:55:32,890
needs a couple of days more work so what
 

2313
00:55:32,890 --> 00:55:36,660
needs a couple of days more work so what
does it do is we talked about before

2314
00:55:36,660 --> 00:55:36,670
does it do is we talked about before
 

2315
00:55:36,670 --> 00:55:40,880
does it do is we talked about before
where you create this out you know outer

2316
00:55:40,880 --> 00:55:40,890
where you create this out you know outer
 

2317
00:55:40,890 --> 00:55:43,709
where you create this out you know outer
folder which is this whole mix hash

2318
00:55:43,709 --> 00:55:43,719
folder which is this whole mix hash
 

2319
00:55:43,719 --> 00:55:45,870
folder which is this whole mix hash
thing you can create multiple of those

2320
00:55:45,870 --> 00:55:45,880
thing you can create multiple of those
 

2321
00:55:45,880 --> 00:55:49,829
thing you can create multiple of those
called lip paint la blah blah and so

2322
00:55:49,829 --> 00:55:49,839
called lip paint la blah blah and so
 

2323
00:55:49,839 --> 00:55:51,989
called lip paint la blah blah and so
when you when you when you generate a

2324
00:55:51,989 --> 00:55:51,999
when you when you when you generate a
 

2325
00:55:51,999 --> 00:55:53,910
when you when you when you generate a
runtime dependency tree you can like

2326
00:55:53,910 --> 00:55:53,920
runtime dependency tree you can like
 

2327
00:55:53,920 --> 00:55:57,059
runtime dependency tree you can like
leave things out right if you example if

2328
00:55:57,059 --> 00:55:57,069
leave things out right if you example if
 

2329
00:55:57,069 --> 00:55:59,370
leave things out right if you example if
you can compile the executable

2330
00:55:59,370 --> 00:55:59,380
you can compile the executable
 

2331
00:55:59,380 --> 00:56:01,319
you can compile the executable
statically and then you don't put in all

2332
00:56:01,319 --> 00:56:01,329
statically and then you don't put in all
 

2333
00:56:01,329 --> 00:56:03,930
statically and then you don't put in all
of the Haskell libraries so instead of

2334
00:56:03,930 --> 00:56:03,940
of the Haskell libraries so instead of
 

2335
00:56:03,940 --> 00:56:06,390
of the Haskell libraries so instead of
downloading you know one gigabyte

2336
00:56:06,390 --> 00:56:06,400
downloading you know one gigabyte
 

2337
00:56:06,400 --> 00:56:07,350
downloading you know one gigabyte
encoding

2338
00:56:07,350 --> 00:56:07,360
encoding
 

2339
00:56:07,360 --> 00:56:09,870
encoding
see you download just the 30 megabytes

2340
00:56:09,870 --> 00:56:09,880
see you download just the 30 megabytes
 

2341
00:56:09,880 --> 00:56:11,730
see you download just the 30 megabytes
of the static executable which doesn't

2342
00:56:11,730 --> 00:56:11,740
of the static executable which doesn't
 

2343
00:56:11,740 --> 00:56:13,470
of the static executable which doesn't
reference that and you know there is a

2344
00:56:13,470 --> 00:56:13,480
reference that and you know there is a
 

2345
00:56:13,480 --> 00:56:15,450
reference that and you know there is a
separate output for documentation and

2346
00:56:15,450 --> 00:56:15,460
separate output for documentation and
 

2347
00:56:15,460 --> 00:56:18,390
separate output for documentation and
and so on so you can be more precise of

2348
00:56:18,390 --> 00:56:18,400
and so on so you can be more precise of
 

2349
00:56:18,400 --> 00:56:21,060
and so on so you can be more precise of
what are the runtime dependencies so for

2350
00:56:21,060 --> 00:56:21,070
what are the runtime dependencies so for
 

2351
00:56:21,070 --> 00:56:23,130
what are the runtime dependencies so for
example right now we have this - static

2352
00:56:23,130 --> 00:56:23,140
example right now we have this - static
 

2353
00:56:23,140 --> 00:56:25,500
example right now we have this - static
packages so they don't pull in and and

2354
00:56:25,500 --> 00:56:25,510
packages so they don't pull in and and
 

2355
00:56:25,510 --> 00:56:27,150
packages so they don't pull in and and
this would be back kind of like now out

2356
00:56:27,150 --> 00:56:27,160
this would be back kind of like now out
 

2357
00:56:27,160 --> 00:56:29,070
this would be back kind of like now out
of the box all the binaries you would

2358
00:56:29,070 --> 00:56:29,080
of the box all the binaries you would
 

2359
00:56:29,080 --> 00:56:31,140
of the box all the binaries you would
reference - they don't have this huge

2360
00:56:31,140 --> 00:56:31,150
reference - they don't have this huge
 

2361
00:56:31,150 --> 00:56:33,840
reference - they don't have this huge
thing you have to like download so it's

2362
00:56:33,840 --> 00:56:33,850
thing you have to like download so it's
 

2363
00:56:33,850 --> 00:56:36,720
thing you have to like download so it's
mostly about reducing the what you have

2364
00:56:36,720 --> 00:56:36,730
mostly about reducing the what you have
 

2365
00:56:36,730 --> 00:56:39,210
mostly about reducing the what you have
to download yeah which is really nice

2366
00:56:39,210 --> 00:56:39,220
to download yeah which is really nice
 

2367
00:56:39,220 --> 00:56:40,950
to download yeah which is really nice
when you like build a docker image and

2368
00:56:40,950 --> 00:56:40,960
when you like build a docker image and
 

2369
00:56:40,960 --> 00:56:42,450
when you like build a docker image and
hand it to someone it's nice that it's

2370
00:56:42,450 --> 00:56:42,460
hand it to someone it's nice that it's
 

2371
00:56:42,460 --> 00:56:44,430
hand it to someone it's nice that it's
like 50 megabytes instead of like a

2372
00:56:44,430 --> 00:56:44,440
like 50 megabytes instead of like a
 

2373
00:56:44,440 --> 00:56:48,990
like 50 megabytes instead of like a
gigabyte and so on there is the cross

2374
00:56:48,990 --> 00:56:49,000
gigabyte and so on there is the cross
 

2375
00:56:49,000 --> 00:56:51,180
gigabyte and so on there is the cross
compilation we you know we would ideally

2376
00:56:51,180 --> 00:56:51,190
compilation we you know we would ideally
 

2377
00:56:51,190 --> 00:56:53,700
compilation we you know we would ideally
we would have nix for you know all the

2378
00:56:53,700 --> 00:56:53,710
we would have nix for you know all the
 

2379
00:56:53,710 --> 00:56:54,330
we would have nix for you know all the
platforms

2380
00:56:54,330 --> 00:56:54,340
platforms
 

2381
00:56:54,340 --> 00:56:56,580
platforms
so going from Linux to Windows compiling

2382
00:56:56,580 --> 00:56:56,590
so going from Linux to Windows compiling
 

2383
00:56:56,590 --> 00:56:59,850
so going from Linux to Windows compiling
with Nix there is a lot of work in the

2384
00:56:59,850 --> 00:56:59,860
with Nix there is a lot of work in the
 

2385
00:56:59,860 --> 00:57:03,990
with Nix there is a lot of work in the
GHC right now to go to arm and you know

2386
00:57:03,990 --> 00:57:04,000
GHC right now to go to arm and you know
 

2387
00:57:04,000 --> 00:57:06,000
GHC right now to go to arm and you know
how do we deal with template haskell and

2388
00:57:06,000 --> 00:57:06,010
how do we deal with template haskell and
 

2389
00:57:06,010 --> 00:57:10,800
how do we deal with template haskell and
so on one of the things that is also

2390
00:57:10,800 --> 00:57:10,810
so on one of the things that is also
 

2391
00:57:10,810 --> 00:57:13,320
so on one of the things that is also
interesting is the CI there is the the

2392
00:57:13,320 --> 00:57:13,330
interesting is the CI there is the the
 

2393
00:57:13,330 --> 00:57:15,780
interesting is the CI there is the the
Hydra what we use is completely pure so

2394
00:57:15,780 --> 00:57:15,790
Hydra what we use is completely pure so
 

2395
00:57:15,790 --> 00:57:17,670
Hydra what we use is completely pure so
it's like you know if you have inputs to

2396
00:57:17,670 --> 00:57:17,680
it's like you know if you have inputs to
 

2397
00:57:17,680 --> 00:57:19,800
it's like you know if you have inputs to
the Nix it distributes the that and

2398
00:57:19,800 --> 00:57:19,810
the Nix it distributes the that and
 

2399
00:57:19,810 --> 00:57:21,030
the Nix it distributes the that and
builds and gets through the build

2400
00:57:21,030 --> 00:57:21,040
builds and gets through the build
 

2401
00:57:21,040 --> 00:57:23,160
builds and gets through the build
results back but in CI there's always

2402
00:57:23,160 --> 00:57:23,170
results back but in CI there's always
 

2403
00:57:23,170 --> 00:57:25,260
results back but in CI there's always
this impure part where you know we have

2404
00:57:25,260 --> 00:57:25,270
this impure part where you know we have
 

2405
00:57:25,270 --> 00:57:27,480
this impure part where you know we have
to do some extra stuff interacting with

2406
00:57:27,480 --> 00:57:27,490
to do some extra stuff interacting with
 

2407
00:57:27,490 --> 00:57:30,870
to do some extra stuff interacting with
the world so there is there is a lack of

2408
00:57:30,870 --> 00:57:30,880
the world so there is there is a lack of
 

2409
00:57:30,880 --> 00:57:32,880
the world so there is there is a lack of
a good tool right now we use a build

2410
00:57:32,880 --> 00:57:32,890
a good tool right now we use a build
 

2411
00:57:32,890 --> 00:57:36,570
a good tool right now we use a build
kite right now but it's far from perfect

2412
00:57:36,570 --> 00:57:36,580
kite right now but it's far from perfect
 

2413
00:57:36,580 --> 00:57:38,550
kite right now but it's far from perfect
and then there's the NIC so as tests

2414
00:57:38,550 --> 00:57:38,560
and then there's the NIC so as tests
 

2415
00:57:38,560 --> 00:57:42,750
and then there's the NIC so as tests
which is basically kind of a driver how

2416
00:57:42,750 --> 00:57:42,760
which is basically kind of a driver how
 

2417
00:57:42,760 --> 00:57:44,550
which is basically kind of a driver how
do you operate with the VM so you can

2418
00:57:44,550 --> 00:57:44,560
do you operate with the VM so you can
 

2419
00:57:44,560 --> 00:57:48,090
do you operate with the VM so you can
say okay use this Nick so Nick so as

2420
00:57:48,090 --> 00:57:48,100
say okay use this Nick so Nick so as
 

2421
00:57:48,100 --> 00:57:51,240
say okay use this Nick so Nick so as
config build a VM and then wait for this

2422
00:57:51,240 --> 00:57:51,250
config build a VM and then wait for this
 

2423
00:57:51,250 --> 00:57:53,640
config build a VM and then wait for this
service do you listen on this port wait

2424
00:57:53,640 --> 00:57:53,650
service do you listen on this port wait
 

2425
00:57:53,650 --> 00:57:58,350
service do you listen on this port wait
for this service to start you know blog

2426
00:57:58,350 --> 00:57:58,360
for this service to start you know blog
 

2427
00:57:58,360 --> 00:58:01,920
for this service to start you know blog
this sport see what happens and so on so

2428
00:58:01,920 --> 00:58:01,930
this sport see what happens and so on so
 

2429
00:58:01,930 --> 00:58:03,630
this sport see what happens and so on so
this is like really nice for

2430
00:58:03,630 --> 00:58:03,640
this is like really nice for
 

2431
00:58:03,640 --> 00:58:06,540
this is like really nice for
reproducible tests and I think in our HK

2432
00:58:06,540 --> 00:58:06,550
reproducible tests and I think in our HK
 

2433
00:58:06,550 --> 00:58:09,060
reproducible tests and I think in our HK
we actually michael already wrote

2434
00:58:09,060 --> 00:58:09,070
we actually michael already wrote
 

2435
00:58:09,070 --> 00:58:11,580
we actually michael already wrote
initial version where we basically

2436
00:58:11,580 --> 00:58:11,590
initial version where we basically
 

2437
00:58:11,590 --> 00:58:13,890
initial version where we basically
launch four nodes and they started the

2438
00:58:13,890 --> 00:58:13,900
launch four nodes and they started the
 

2439
00:58:13,900 --> 00:58:17,460
launch four nodes and they started the
blockchain and and you could then you

2440
00:58:17,460 --> 00:58:17,470
blockchain and and you could then you
 

2441
00:58:17,470 --> 00:58:19,230
blockchain and and you could then you
know make some transactions and

2442
00:58:19,230 --> 00:58:19,240
know make some transactions and
 

2443
00:58:19,240 --> 00:58:21,960
know make some transactions and
and and an exit and get an output of

2444
00:58:21,960 --> 00:58:21,970
and and an exit and get an output of
 

2445
00:58:21,970 --> 00:58:24,690
and and an exit and get an output of
locks and and like analyze that and you

2446
00:58:24,690 --> 00:58:24,700
locks and and like analyze that and you
 

2447
00:58:24,700 --> 00:58:27,480
locks and and like analyze that and you
know graph for example you know I don't

2448
00:58:27,480 --> 00:58:27,490
know graph for example you know I don't
 

2449
00:58:27,490 --> 00:58:29,190
know graph for example you know I don't
know how long did it take to create

2450
00:58:29,190 --> 00:58:29,200
know how long did it take to create
 

2451
00:58:29,200 --> 00:58:30,810
know how long did it take to create
blocks over to ten minutes how many

2452
00:58:30,810 --> 00:58:30,820
blocks over to ten minutes how many
 

2453
00:58:30,820 --> 00:58:32,700
blocks over to ten minutes how many
blocks were missed and so on so this

2454
00:58:32,700 --> 00:58:32,710
blocks were missed and so on so this
 

2455
00:58:32,710 --> 00:58:37,740
blocks were missed and so on so this
could be all been automated that it's

2456
00:58:37,740 --> 00:58:37,750
could be all been automated that it's
 

2457
00:58:37,750 --> 00:58:40,589
could be all been automated that it's
this is basically almost ready the part

2458
00:58:40,589 --> 00:58:40,599
this is basically almost ready the part
 

2459
00:58:40,599 --> 00:58:43,380
this is basically almost ready the part
that was not working is actually that it

2460
00:58:43,380 --> 00:58:43,390
that was not working is actually that it
 

2461
00:58:43,390 --> 00:58:46,770
that was not working is actually that it
uses VM so on Amazon if you do nested

2462
00:58:46,770 --> 00:58:46,780
uses VM so on Amazon if you do nested
 

2463
00:58:46,780 --> 00:58:49,109
uses VM so on Amazon if you do nested
virtualization it's basically emulation

2464
00:58:49,109 --> 00:58:49,119
virtualization it's basically emulation
 

2465
00:58:49,119 --> 00:58:51,270
virtualization it's basically emulation
on trivialization and it's really slow

2466
00:58:51,270 --> 00:58:51,280
on trivialization and it's really slow
 

2467
00:58:51,280 --> 00:58:53,760
on trivialization and it's really slow
so the blockchain can keep up and it

2468
00:58:53,760 --> 00:58:53,770
so the blockchain can keep up and it
 

2469
00:58:53,770 --> 00:58:57,960
so the blockchain can keep up and it
starts to do to fall over so we will

2470
00:58:57,960 --> 00:58:57,970
starts to do to fall over so we will
 

2471
00:58:57,970 --> 00:58:59,849
starts to do to fall over so we will
have to use bare metal machines probably

2472
00:58:59,849 --> 00:58:59,859
have to use bare metal machines probably
 

2473
00:58:59,859 --> 00:59:03,270
have to use bare metal machines probably
to do this kind of things so we have to

2474
00:59:03,270 --> 00:59:03,280
to do this kind of things so we have to
 

2475
00:59:03,280 --> 00:59:07,440
to do this kind of things so we have to
provision that yeah this is these are

2476
00:59:07,440 --> 00:59:07,450
provision that yeah this is these are
 

2477
00:59:07,450 --> 00:59:09,180
provision that yeah this is these are
some of the references I would mainly

2478
00:59:09,180 --> 00:59:09,190
some of the references I would mainly
 

2479
00:59:09,190 --> 00:59:12,060
some of the references I would mainly
recommend reading the next pose if we

2480
00:59:12,060 --> 00:59:12,070
recommend reading the next pose if we
 

2481
00:59:12,070 --> 00:59:19,800
recommend reading the next pose if we
can just cover that so this goes into

2482
00:59:19,800 --> 00:59:19,810
can just cover that so this goes into
 

2483
00:59:19,810 --> 00:59:23,280
can just cover that so this goes into
very much in details into well what I

2484
00:59:23,280 --> 00:59:23,290
very much in details into well what I
 

2485
00:59:23,290 --> 00:59:30,160
very much in details into well what I
just described

2486
00:59:30,160 --> 00:59:30,170

 

2487
00:59:30,170 --> 00:59:37,340

there we go and there is you know it's a

2488
00:59:37,340 --> 00:59:37,350
there we go and there is you know it's a
 

2489
00:59:37,350 --> 00:59:43,100
there we go and there is you know it's a
it's a kind of a long tutorial about the

2490
00:59:43,100 --> 00:59:43,110
it's a kind of a long tutorial about the
 

2491
00:59:43,110 --> 00:59:46,100
it's a kind of a long tutorial about the
insides of the neck spec packages it's

2492
00:59:46,100 --> 00:59:46,110
insides of the neck spec packages it's
 

2493
00:59:46,110 --> 00:59:48,200
insides of the neck spec packages it's
pretty long and but you know at least

2494
00:59:48,200 --> 00:59:48,210
pretty long and but you know at least
 

2495
00:59:48,210 --> 00:59:56,480
pretty long and but you know at least
then it explains you sorry yeah they're

2496
00:59:56,480 --> 00:59:56,490
then it explains you sorry yeah they're
 

2497
00:59:56,490 --> 00:59:58,880
then it explains you sorry yeah they're
the the other you know it's a before you

2498
00:59:58,880 --> 00:59:58,890
the the other you know it's a before you
 

2499
00:59:58,890 --> 01:00:03,160
the the other you know it's a before you
go to sleep kind of thing

2500
01:00:03,160 --> 01:00:03,170

 

2501
01:00:03,170 --> 01:00:18,900

[Music]

